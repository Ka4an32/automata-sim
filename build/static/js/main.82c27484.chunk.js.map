{"version":3,"sources":["react-graph-vis-types.js","Components/ControlWrapper/ControlWrapper.tsx","Logic/IGraphTypes.ts","Components/NodeControl/NodeControl.tsx","Logic/Computer.ts","utils.tsx","hoc.tsx","Components/EdgeControl/EdgeControl.tsx","Components/WelcomePopout/WelcomePopout.tsx","SavesManager/BrowserSavesManager.ts","Components/SavingPopout/SavingPopout.tsx","Components/Pages/RegisterPage/RegisterPage.tsx","Components/AppHeader/AppHeader.tsx","Components/Pages/RegisteredPage/RegisteredPage.tsx","VisNetwork.tsx","ErrorModal.tsx","Components/Pages/UserPage/UserPage.tsx","action.tsx","Ribbon.tsx","Logic/Mealy.ts","Logic/OutputAutomata.ts","Components/RunControl/History.tsx","Components/RunControl/RunControl.tsx","App.tsx","index.tsx"],"names":["exports","__esModule","ControlWrapper","_this$props","this","props","visible","title","style","className","children","restProps","Object","objectWithoutProperties","_excluded","react_default","a","createElement","Paper","assign","concat","variant","Typography","React","Component","defaultProps","Move","NodeControl","_this$props$node","_this$props$node2","_this$props$node3","_this$props$node4","_this","classCallCheck","_super","call","onLabelChange","event","node","changeNodeLabel","id","target","value","setState","label","onIsAdmitChanged","changeStateIsAdmit","checked","isAdmit","reinitComputer","onIsInitialChanged","changeStateIsInitial","isInitial","onDeleteClick","deleteNode","state","prevNodeId","prevProps","prevState","_this$props$node5","_this$props$node6","_this$props$node7","_this$props$node8","_this$props$node9","Components_ControlWrapper_ControlWrapper","FormControl","TextField","size","onChange","FormControlLabel","control","Switch","Button","onClick","EPS","Computer","graph","startStatements","input","alphabet","Map","statements","nodes","edges","currentNode","counterSteps","counterStepsForResult","historiStep","historiRun","matrix","haveEpsilon","restart","run","step","setInput","byEmptyStackAdmt","isAdmt","Error","nfaToDfa","minimizeDfa","mooreToMealy","mealyToMoore","getCurrNode","getStartStatements","sort","b","from","forEach","push","transitions","undefined","Set","to","localValue","_loop","i","value1","length","getAlphabetFromEdges","getStatementsFromNodes","createMatrix","createClass","key","_this2","alphabetSet","add","set","idLogic","output","j","statementFrom","get","statementTo","letterId","console","log","stDwn","stackDown","stPsh","stackPush","mv","move","objectSpread2","epsSubstStr","epsText","epsSubstStrs","values","map","v","join","mvStr","transitionsToLabel","frmt","maxLength","max","phs","Math","apply","toConsumableArray","o","ttl","std","spc","epsSubst","epsSubsts","str","getTransitionsTitles","decorateGraph","elements","edge","update","lableTokens","split","filter","x","border","background","isCurrent","borderWidth","color","highlight","borderWidthSelected","graphToElements","acc","DataSet","elementsToGraph","computersInfo","mealy","name","preview","description","defaultGraph","y","withComputerType","ComputerTypeContext","Consumer","context","computerType","EdgeControl","_this$props$edge","_this$props$edge2","_this$props$edge3","_this$props$edge4","selectTransition","transition","activeTransition","changeTransitions","_ref","asyncToGenerator","regenerator_default","mark","_callee","accumulator","wrap","_context","prev","next","transitionsText","fth","tmp","fst","shift","trd","bebra","reverse","snd","_value$trd","L","R","changeEdgeTransitions","stop","_x","arguments","deleteEdge","_callee2","_context2","changeEditMode","editMode","updateTransitions","_callee3","_context3","out","_value$trd2","deleteTransition","delete","helperText","prevEdgeId","displayedTransitionText","countRules","rules","_this$props$edge5","_this$props$edge6","_this$props$edge7","_this$props$edge8","newRow","multiline","rows","onBlur","Edit_default","WelcomePopout","open","onClose","changeComputerType","_useState","useState","_useState2","slicedToArray","cloudSavesMeta","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","List","dense","ListSubheader","entries","entry","ListItem","secondaryAction","type","ListItemText","primary","secondary","BrowserSavesManager","saves","getSaves","Promise","resolve","saveMeta","save","find","localStorage","next_id","Number","toString","save_index","findIndex","saves_json","JSON","stringify","Array","setItem","parse","getItem","error","warn","SavingPopout","isLogin","updateNames","_ref2","savesMeta","setLoadingSavesMeta","t0","savesOrigin","browserSavesManager","getSavesMeta","sent","abrupt","setSavesMeta","_useState3","_useState4","setSavesOrigin","_useState5","_useState6","_useState7","_useState8","loadingSavesMeta","_useState9","_useState10","saveName","setSaveName","useEffect","ToggleButtonGroup","orientation","exclusive","_","ToggleButton","disabled","Skeleton","animation","height","disablePadding","ListItemButton","e","onSaveNameClicked","DialogActions","RegisterPage","objectDestructuringEmpty","navigate","useNavigate","email","setEmail","password","setPassword","about","setAbout","setError","onRegisterClicked","Container","Stack","spacing","justifyContent","minHeight","align","sx","paddingBottom","Alert","severity","AppHeader","onMenuButtonClicked","AppBar","position","Toolbar","RegisteredPage","VisNetwork","useRef","domNode","smooth","enabled","roundness","width","arrows","scaleFactor","manipulation","addEdge","data","callback","setKeyPressed","network","current","disableEditMode","layout","improvedLayout","shapeProperties","interpolation","shape","font","labelHighlightBold","physics","options","_React$useState","_React$useState2","contextMenu","setContextMenu","handleContextMenu","preventDefault","mouseX","clientX","mouseY","clientY","handleClose","keyPressed","handleUserKeyPress","useCallback","keyCode","addEdgeMode","handleUserKeyUnPress","content","start","end","window","addEventListener","removeEventListener","createRef","useLayoutEffect","Network","on","params","onDoubleClick","onClick1","onClick2","onClick3","onClick4","unselectAll","refContainer","ref","onContextMenu","Menu","anchorReference","anchorPosition","top","left","transform","bgcolor","boxShadow","p","NonDetermenisticModal","setOpen","isNonDetermenistic","setIsNonDetermenistic","react","Modal","aria-labelledby","aria-describedby","Box","component","mt","NonMinimizableModal","_React$useState3","_React$useState4","isNonMinimizable","setIsNonMinimizable","UserPage","user","cloneDialogOpen","setCloneDialogOpen","setSaveToCloneId","onCloneDialogClose","DialogContentText","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Date","createdDateTime","toLocaleString","lastModifiedDateTime","icon","computerAction","init","controlAction","changerByStack","reset","Ribbon","_props$mem","wasComputerResetted","mem","index","_props$memRef","_props$memRef$current","ptr","abs","memRef","scrollIntoView","behavior","Mealy","_OutputAutomata","inherits","createSuper","outs","has","outNumbs","k","diffEdges","reduce","t","toOuts","fill","count","nodesMoore","outEdges","idLetter","startNodes","startMoore","_toOuts$get","edgesMoore","graphcore","oaStep","oaRun","_Computer","OutputAutomata","curPosition","stmt","histTrace","after","_step","counter","history","haveAdmitting","toNodes","nextStepPosition","by","cellMatrix","ret","getLetter","cur","nextStepPositions","positions","nextPOs","nextPs","pos","po","nextOs","outputs","_this$input$ref$count","byLetter","trNum","nextPositions","nodesOfCurPos","line","cells","fstCell","hasDublicates","retNodes","temp","stack","getStorage","History","startNode","Tooltip","note","historyEndRef","creatButtons","buttons","buttonsComp","button","RunControl","computerShouldBeUpdated","some","curr","isEqual","getComputer","initialNode","initializeComputer","gElements","resetHistTree","computer","result","paddingTreeId","getLastHistNodeId","idd","gNode","gEl","createHistNode","lastHistUnits","onInputChanged","_this$state$computer","drawTreeLayot","pred","letter","l","txt","stackDwn","bySymbRules","_v$from","_v$from2","_p$stack","_v$from$stack","rule","createHistEdge","treeEps","byEpsPred","byEpsAfter","tmp1","tree","stepResult","_nodes","setResettedStatus","wasRuned","currentInputIndex","changeStateIsCurrent","updMem","memory","pointer","nodeCore","setHistory","History_History","_this$state$computer2","_this$state$computer3","_callee4","_context4","_ref4","histStep","it","updateElements","setComputerType","admitByStack","curStbyEmp","byEmptyStack","setByEmptyStack","miniDFA","starts","includes","defaultButtonsLine","buttonsTree","treeContextInfo","treeVisible","buttonNfa","buttonDfa","buttonMealy","buttonMoore","buttonsByStackByState","changerStack","buttonsNoRun","getButtons","setInit","haveEmpty","setNfaToDfa","setMinimizeDfa","setMooreToMealy","setMealyToMoore","setChangerByStack","setRun","setStep","setReset","snapshot","_this3","char","Done_default","Close_default","createContext","App","networkTST","errIsNonDetermenistic","errIsNonMinimizable","lastNodeId","subscribeToShortcuts","document","ctrlKey","openSavePopout","savePopoutOpen","closeSavePopout","openWelcomePopout","welcomePopoutOpen","closeWelcomePopout","setUser","updateGraph","ids","createNode","canvas","lastHistNodeId","treeElems","remove","selectNode","nodesIDs","selectedNodes","selectedNode","deselectNode","rmEdges","selectEdge","edgesIDs","selectedEdges","selectedEdge","deselectEdge","changeEdgeTransition","showTree","inEdgeMode","widthConstraint","heightConstraint","initiallyStabilized","popout","react_router_dom","react_router","path","element","Pages_RegisterPage_RegisterPage","Pages_RegisteredPage_RegisteredPage","Pages_UserPage_UserPage","Provider","Components_WelcomePopout_WelcomePopout","Components_SavingPopout_SavingPopout","ErrorModal_NonDetermenisticModal","ErrorModal_NonMinimizableModal","Ribbon_Ribbon","Components_AppHeader_AppHeader","onSaveButtonClicked","VisNetwork_VisNetwork","Components_NodeControl_NodeControl","Components_EdgeControl_EdgeControl","Components_RunControl_RunControl","f","status","jsx","_this2$historyEndRef","_this2$historyEndRef$","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.82c27484.chunk.js","sourcesContent":["\"use strict\";\r\nexports.__esModule = true;\r\n","import React, {AllHTMLAttributes} from \"react\";\r\nimport \"./ControlWrapper.css\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport interface ControlWrapperProps extends AllHTMLAttributes<HTMLElement> {\r\n    title: string,\r\n    visible: boolean\r\n}\r\n\r\nclass ControlWrapper extends React.Component<ControlWrapperProps, {}> {\r\n    static defaultProps = {\r\n        visible: true\r\n    }\r\n\r\n    render() {\r\n        const {visible, title, style, className, children, ...restProps} = this.props;\r\n\r\n        return (\r\n            <Paper className={`control-wrapper${visible ? \"\" : \"--hidden\"} ${className}`}\r\n                   variant=\"outlined\"\r\n                   style={style}\r\n                   {...restProps}\r\n            >\r\n                <div className=\"control-wrapper--content\">\r\n                    <div>\r\n                        <Typography variant=\"h6\">\r\n                            {title}\r\n                        </Typography>\r\n                    </div>\r\n\r\n                    <div className=\"control-wrapper--child\">\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlWrapper;","import { Output } from \"./Types\";\r\n\r\nexport interface NodeCore {\r\n    id: number,\r\n    isAdmit: boolean,\r\n    stack?: string[],\r\n    move?: Move,\r\n    output?: Output,\r\n    from?: NodeCore,\r\n    cur?: NodeCore,\r\n    by?: any,\r\n    oldStack?: string[],\r\n    stackDown?: string,\r\n}\r\n\r\nexport enum Move {\r\n    L,\r\n    R,\r\n}\r\n\r\nexport interface TransitionParams {\r\n    title: string\r\n    stackDown?: string\r\n    stackPush?: string[]\r\n    move?: Move\r\n    output?: Output\r\n}\r\n\r\n\r\nexport interface EdgeCore  {\r\n    from: number\r\n    to: number\r\n    transitions: Set<TransitionParams[]>\r\n}\r\n\r\nexport interface GraphCore  {\r\n    nodes: NodeCore[]\r\n    edges: EdgeCore[]\r\n}\r\n\r\nexport interface GraphEval {\r\n    graphcore: GraphCore,\r\n    start: NodeCore\r\n}\r\n\r\nexport interface GraphEvalMultiStart {\r\n    graphcore: GraphCore,\r\n    start: NodeCore[]\r\n}","import React, { ChangeEvent } from \"react\";\r\nimport \"./NodeControl.css\";\r\nimport { node } from \"../../react-graph-vis-types\";\r\nimport ControlWrapper from \"../ControlWrapper/ControlWrapper\";\r\n\r\nimport Switch from \"@mui/material/Switch\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\n\r\ninterface nodeControlProps {\r\n    node: node | null,\r\n    changeNodeLabel: (id: number, label: string) => void,\r\n    changeStateIsAdmit: (id: number, isAdmit: boolean) => void,\r\n    changeStateIsInitial: (id: number, isInitial: boolean) => void,\r\n    deleteNode: (id: number) => void,\r\n    reinitComputer: (() => void)\r\n}\r\n\r\ninterface nodeControlState {\r\n    prevNodeId: number | undefined,\r\n    label: string,\r\n    isAdmit: boolean,\r\n    isInitial: boolean\r\n}\r\n\r\nclass NodeControl extends React.Component<nodeControlProps, nodeControlState> {\r\n    constructor(props: nodeControlProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            prevNodeId: this.props.node?.id,\r\n            label: this.props.node?.label || \"\",\r\n            isAdmit: this.props.node?.isAdmit || false,\r\n            isInitial: this.props.node?.isInitial || false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<nodeControlProps>, prevState: Readonly<nodeControlState>) {\r\n        if (this.props.node?.id !== prevState.prevNodeId) {\r\n            this.setState({\r\n                label: this.props.node?.label || \"\",\r\n                    \r\n                isAdmit: this.props.node?.isAdmit || false,\r\n                isInitial: this.props.node?.isInitial || false,\r\n                prevNodeId: this.props.node?.id\r\n            });\r\n        }\r\n    }\r\n\r\n    onLabelChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        if (this.props.node !== null) {\r\n            this.props.changeNodeLabel(this.props.node.id, event.target.value);\r\n            this.setState({ label: event.target.value });\r\n        }\r\n    }\r\n\r\n    onIsAdmitChanged = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        if (this.props.node !== null) {\r\n            this.props.changeStateIsAdmit(this.props.node.id, event.target.checked);\r\n            this.setState({ isAdmit: event.target.checked }, () => this.props.reinitComputer());\r\n        }\r\n    }\r\n\r\n    onIsInitialChanged = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        if (this.props.node !== null && !this.props.node.isAdmit) {\r\n            this.props.changeStateIsInitial(this.props.node.id, event.target.checked);\r\n            this.setState({ isInitial: event.target.checked }, () => this.props.reinitComputer());\r\n        }\r\n    }\r\n\r\n    onDeleteClick = (): void => {\r\n        if (this.props.node !== null) {\r\n            this.props.deleteNode(this.props.node.id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ControlWrapper title=\"Состояние\" visible={this.props.node !== null}>\r\n                <FormControl>\r\n\r\n                    <div className=\"node-control__item\">\r\n                        <TextField\r\n                            label=\"Имя\"\r\n                            size=\"small\"\r\n                            value={this.state.label}\r\n                            onChange={this.onLabelChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"node-control__item\">\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.isInitial}\r\n                                    onChange={this.onIsInitialChanged}\r\n                                />\r\n                            }\r\n                            label={\"Начальное\"}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"node-control__item\">\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.isAdmit}\r\n                                    onChange={this.onIsAdmitChanged}\r\n                                />\r\n                            }\r\n                            label=\"Допускающее\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"node-control__item\">\r\n                        <Button\r\n                            onClick={this.onDeleteClick}\r\n                        >\r\n                            Удалить\r\n                        </Button>\r\n                    </div>\r\n\r\n                </FormControl>\r\n            </ControlWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NodeControl;","import { History, Edge, elementOfAlphabet, statement, Step, Output } from \"./Types\";\r\nimport { GraphCore, GraphEval, GraphEvalMultiStart, Move, NodeCore, TransitionParams } from \"./IGraphTypes\";\r\n\r\nexport type statementCell = {\r\n    readonly stackDown?: string\r\n    readonly stackPush?: string[]\r\n    readonly move?: Move\r\n    readonly output?: Output\r\n} & statement\r\n\r\nexport const eof: statement = { isAdmit: false, idLogic: -1, id: -1 }\r\nexport const EPS: string = 'Epsilon'\r\nexport const BOTTOM = \"Z0\"\r\n\r\nexport abstract class Computer {\r\n    protected input: elementOfAlphabet[] = []\r\n    protected alphabet = new Map()\r\n    protected statements = new Map()\r\n    protected nodes: NodeCore[]\r\n    protected startStatements: NodeCore[] = []\r\n    protected edges: Edge[] = []\r\n    protected currentNode: NodeCore\r\n    protected counterSteps: number = 0\r\n    protected counterStepsForResult: number = 0\r\n    protected historiStep: History[] = []\r\n    protected historiRun: History[] = []\r\n    protected matrix: any[][] = []\r\n\r\n    public abstract haveEpsilon: () => boolean\r\n    public abstract restart: () => void\r\n    public abstract run: () => Step\r\n    public abstract step: () => Step\r\n    public abstract setInput: (input: string[]) => void\r\n\r\n    public getInput() {\r\n        return this.input\r\n    }\r\n\r\n    public getAlphabet() {\r\n        return this.alphabet\r\n    }\r\n\r\n    public byEmptyStackAdmt = (isAdmt: boolean): void => {\r\n        throw new Error(\"PDA attribute\")\r\n    }\r\n\r\n    public nfaToDfa = (): GraphCore => {\r\n        throw new Error(\"DFA conversion\")\r\n    }\r\n\r\n    public minimizeDfa = (): GraphEval => {\r\n        throw new Error(\"DFA conversion\")\r\n    }\r\n\r\n    public mooreToMealy = (): GraphEvalMultiStart => {\r\n        throw new Error(\"Moor conversion\")\r\n    }\r\n\r\n    public mealyToMoore = (): GraphEvalMultiStart => {\r\n        throw new Error(\"Moor conversion\")\r\n    }\r\n\r\n    protected getAlphabetFromEdges(): void {\r\n        let alphabetSet: Set<string> = new Set()\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            this.edges[i].localValue.forEach(value => {\r\n                if (value.title !== \"\") {\r\n                    alphabetSet.add(value.title)\r\n                }\r\n            })\r\n        }\r\n        let i = 0\r\n        alphabetSet.forEach(value => {\r\n            if (value !== \"\") {\r\n                this.alphabet.set(value, i)\r\n                i++\r\n            }\r\n        })\r\n    }\r\n\r\n    protected getStatementsFromNodes(nodes: NodeCore[]): void {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            this.statements.set(\r\n                nodes[i].id,\r\n                {\r\n                    id: nodes[i].id,\r\n                    isAdmit: nodes[i].isAdmit,\r\n                    idLogic: i,\r\n                    output: nodes[i].output\r\n                })\r\n        }\r\n    }\r\n\r\n    private createMatrix(): void {\r\n        for (let i = 0; i < this.statements.size; i++) {\r\n            this.matrix[i] = []\r\n            for (let j = 0; j < this.alphabet.size; j++) {\r\n                this.matrix[i][j] = []\r\n            }\r\n        }\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            let statementFrom: statement = this.statements.get(this.edges[i].from)\r\n            let statementTo: statement = this.statements.get(this.edges[i].to)\r\n            for (let j = 0; j < this.edges[i].localValue.length; j++) {\r\n                let letterId = this.alphabet.get(this.edges[i].localValue[j].title)\r\n\r\n                if (letterId === undefined) {\r\n                    continue\r\n                }\r\n                console.log(letterId)\r\n                console.log(this.edges[i].localValue[j].title)\r\n                let stDwn = this.edges[i].localValue[j].stackDown\r\n                let stPsh = this.edges[i].localValue[j].stackPush\r\n                let mv = this.edges[i].localValue[j].move\r\n                let output = this.edges[i].localValue[j].output === undefined ? statementTo.output : this.edges[i].localValue[j].output\r\n                if (stDwn === undefined || stPsh === undefined || stDwn === \"\" || stPsh.length === 0) {\r\n                    stDwn = EPS\r\n                    stPsh = [EPS]\r\n                }\r\n                this.matrix[statementFrom.idLogic][letterId].push({\r\n                    ...statementTo,\r\n                    stackDown: stDwn,\r\n                    stackPush: stPsh,\r\n                    move: mv,\r\n                    output: output\r\n                })\r\n            }\r\n        }\r\n        this.alphabet.forEach((value, key) => console.log(value, ' ', key))\r\n        this.statements.forEach(value => console.log(value))\r\n        this.matrix.forEach(value => {\r\n            console.log()\r\n            value.forEach(value1 => console.log(value1))\r\n        })\r\n    }\r\n\r\n    public cellMatrix(i: number, j: number): statementCell[] {\r\n        return this.matrix[i][j]\r\n    }\r\n\r\n    public getCurrNode = (): number => {\r\n        return this.currentNode.id\r\n    }\r\n\r\n    protected constructor(graph: GraphCore, startStatements: NodeCore[]) {\r\n\r\n        graph.edges\r\n            .sort((a, b) => a.from - b.from)\r\n            .forEach(value => this.edges.push({\r\n                transitions: value.transitions === undefined ? new Set<TransitionParams[]>([[{ title: \"\" }]]) : value.transitions,\r\n                from: value.from,\r\n                to: value.to,\r\n                localValue: [],\r\n            }))\r\n\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            this.edges[i].localValue = []\r\n            this.edges[i].transitions.forEach(value =>\r\n                value.forEach(value1 => this.edges[i].localValue!.push(value1))\r\n            )\r\n        }\r\n\r\n        this.getAlphabetFromEdges()\r\n        this.getStatementsFromNodes(graph.nodes)\r\n        this.startStatements = startStatements\r\n        this.currentNode = startStatements[0]\r\n        this.nodes = graph.nodes\r\n        this.createMatrix()\r\n    }\r\n\r\n    public getStartStatements = (): NodeCore[] => {\r\n        return this.startStatements\r\n    }\r\n}","import { ComputerInfo, ComputerType, edge, graph, node } from \"./react-graph-vis-types\";\r\nimport { EPS } from \"./Logic/Computer\";\r\nimport { Move, TransitionParams } from \"./Logic/IGraphTypes\";\r\nimport { Elements } from \"./App\";\r\nimport { DataSet } from \"vis-network/standalone/esm/vis-network\";\r\n\r\n\r\nconst epsSubstStr = (epsText: string) => (value: string) => value === EPS ? epsText : value\r\n\r\nconst epsSubstStrs = (epsText: string) => (values: string[]) => {\r\n    return values.map(v => epsSubstStr(epsText)(v)).join(\":\")\r\n}\r\n\r\nconst mvStr = (value: Move) => value === 0 ? \"L\" : \"R\"\r\n\r\nexport const transitionsToLabel = (transitions: Set<TransitionParams[]>, frmt: null | ComputerType): string => {\r\n    const maxLength = (): number => {\r\n        let max: number = 0;\r\n        if (transitions !== undefined) {\r\n            transitions.forEach(value => {\r\n                value.forEach(value1 => {\r\n                    if (value1.stackDown !== undefined && value1.stackPush !== undefined) {\r\n                        const phs: number = Math.max(...value1.stackPush.map(o => o === EPS ? 0 : o.length), 0)\r\n                        const ttl: number = value1.title === EPS ? 0 : value1.title.length\r\n                        const std: number = value1.stackDown === EPS ? 0 : value1.stackDown.length\r\n                        max = Math.max(...[phs, ttl, std, max].map(o => o), 0)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        return max\r\n    }\r\n\r\n    let spc = \"\"\r\n    const pdng_k = 7\r\n\r\n    for (let i = 0; i < maxLength() * pdng_k; i++) {\r\n        spc += \" \"\r\n    }\r\n\r\n    const epsSubst = epsSubstStr(\"ε\")\r\n    const epsSubsts = epsSubstStrs(\"ε\")\r\n\r\n    spc = frmt === 'tm' ? '       ' : spc\r\n\r\n    let str = \"\" + spc\r\n    if (transitions !== undefined) {\r\n        if (frmt === 'tm') {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.stackDown !== undefined && v.stackPush !== undefined && v.move !== undefined) {\r\n                        str += epsSubst(v.stackDown) + \" | \" + epsSubsts(v.stackPush) + \" \" + mvStr(v.move) + \"\\n\" + spc\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === 'pda' || frmt === \"dpda\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0 && v.stackDown !== undefined && v.stackDown.length > 0 && v.stackPush !== undefined && v.stackPush.length > 0) {\r\n                        str += epsSubst(v.title) + \", \" + epsSubst(v.stackDown) + \" | \" + epsSubsts(v.stackPush) + \" \" + \"\\n\" + spc\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === \"dfa\" || frmt === \"nfa\" || frmt === \"nfa-eps\" || frmt === \"moore\" || frmt === \"dmoore\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0) {\r\n                        str += epsSubst(v.title) + \" \" + \"\\n\" + spc\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === \"mealy\" || frmt === \"dmealy\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0 && v.output !== undefined) {\r\n                        str += epsSubst(v.title) + \" | \" + v.output + \"\\n\" + spc\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    return str\r\n}\r\n\r\n\r\nexport const getTransitionsTitles = (transitions: Set<TransitionParams[]>, frmt: null | ComputerType): string => {\r\n    const epsSubst = epsSubstStr(\"eps\")\r\n    const epsSubsts = epsSubstStrs(\"eps\")\r\n\r\n    let str = \"\"\r\n    if (transitions !== undefined) {\r\n        if (frmt === 'tm') {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.stackDown !== undefined && v.stackPush !== undefined && v.move !== undefined) {\r\n                        str += epsSubst(v.stackDown) + \" | \" + epsSubsts(v.stackPush) + '>' + mvStr(v.move) + \";\\n\"\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === \"pda\" || frmt === \"dpda\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0 && v.stackDown !== undefined && v.stackDown.length > 0 && v.stackPush !== undefined && v.stackPush.length > 0) {\r\n                        str += epsSubst(v.title) + \", \" + epsSubst(v.stackDown) + \" | \" + epsSubsts(v.stackPush) + \";\\n\"\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === \"dfa\" || frmt === \"nfa\" || frmt === \"nfa-eps\" || frmt === \"moore\" || frmt === \"dmoore\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0) {\r\n                        str += epsSubst(v.title) + \";\\n\"\r\n                    }\r\n                })\r\n            })\r\n        } else if (frmt === \"mealy\" || frmt === \"dmealy\") {\r\n            transitions.forEach(value => {\r\n                value.forEach((v) => {\r\n                    if (v.title !== undefined && v.title.length > 0 && v.output !== undefined) {\r\n                        str += epsSubst(v.title) + \" | \" + v.output + \";\\n\"\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    return str\r\n}\r\n\r\nexport const decorateGraph = (elements: Elements, frmt: null | ComputerType) => {\r\n    elements.edges.forEach((edge) => {\r\n        elements.edges.update({\r\n            id: edge.id!,\r\n            label: transitionsToLabel(edge.transitions, frmt)\r\n        })\r\n    })\r\n\r\n    elements.nodes.forEach((node) => {\r\n        const lableTokens =\r\n            node.label\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split('|')\r\n        const output = lableTokens[1] !== undefined ? lableTokens[1] : undefined\r\n        node.output = output\r\n\r\n        const border = node.isInitial ? \"#0041d0\" : node.isAdmit ? \"#ff0072\" : \"#000000\"\r\n        const background = node.isCurrent ? \"#ffff55\" : \"#ffffff\";\r\n        const borderWidth = {\r\n            default: 1.5,\r\n            primary: 2,\r\n            highlight: 4\r\n        };\r\n\r\n        elements.nodes.update({\r\n            id: node.id,\r\n            color: {\r\n                background: background,\r\n                border: border,\r\n                highlight: {\r\n                    border: border,\r\n                    background: background\r\n                }\r\n            },\r\n            borderWidth: node.isInitial || node.isAdmit ? borderWidth.primary : borderWidth.default,\r\n            borderWidthSelected: borderWidth.highlight\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport const graphToElements = (graph: graph): Elements => {\r\n    let acc: Elements = { nodes: new DataSet<node, \"id\">(), edges: new DataSet<edge, \"id\">() }\r\n\r\n    graph.nodes.forEach((node) => {\r\n        acc.nodes.add(node)\r\n    })\r\n    graph.edges.forEach((edge) => {\r\n        acc.edges.add(edge)\r\n    })\r\n\r\n    return acc\r\n}\r\n\r\nexport const elementsToGraph = (elements: Elements): graph => {\r\n    let acc: graph = { nodes: [], edges: [] }\r\n\r\n    elements.nodes.forEach((node) => {\r\n        acc.nodes.push(node)\r\n    })\r\n    elements.edges.forEach((edge) => {\r\n        acc.edges.push(edge)\r\n    })\r\n\r\n    return acc\r\n}\r\n\r\nexport const getNodeNamePrefix = (graph: graph): string => {\r\n    let prefix = graph.nodes.length === 0 ? \"\" : graph.nodes[0].label;\r\n\r\n    graph.nodes.forEach(node => {\r\n        let i = 0;\r\n        while (i < node.label.length && i < prefix.length && node.label[i] === prefix[i]) {\r\n            i++;\r\n        }\r\n        prefix = prefix.substring(0, i);\r\n    });\r\n\r\n    return prefix;\r\n}\r\n\r\nexport const computersInfo: Record<any, ComputerInfo> = {\r\n    mealy: {\r\n        name: \"Автомат Мили\",\r\n        preview: \"mealy.png\",\r\n        description: \"Зависит от состояния автомата и входных сигналов\",\r\n        defaultGraph: {\r\n            nodes: [\r\n                { x: 0, y: 0, id: 1, isAdmit: false, isCurrent: false, isInitial: true, label: \"0 rub\" },\r\n                { x: 300, y: -200, id: 2, isAdmit: false, isCurrent: false, isInitial: false, label: \"5 rub\" },\r\n                { x: 500, y: -300, id: 3, isAdmit: false, isCurrent: false, isInitial: false, label: \"15 rub\" },\r\n                { x: -100, y: -500, id: 4, isAdmit: false, isCurrent: false, isInitial: false, label: \"10 rub\" }\r\n            ],\r\n            edges: [\r\n                { from: 1, to: 2, transitions: new Set([[{ title: 'f', output: 'n' }]]) },\r\n                { from: 1, to: 4, transitions: new Set([[{ title: 't', output: 'n' }]]) },\r\n                { from: 2, to: 3, transitions: new Set([[{ title: 't', output: 'n' }]]) },\r\n                { from: 2, to: 4, transitions: new Set([[{ title: 'f', output: 'n' }]]) },\r\n                { from: 3, to: 1, transitions: new Set([[{ title: 'f', output: '0' }, { title: 't', output: '5' }]]) },\r\n                { from: 4, to: 3, transitions: new Set([[{ title: 'f', output: 'n' }]]) },\r\n                { from: 4, to: 1, transitions: new Set([[{ title: 't', output: '0' }]]) },\r\n            ]\r\n        }\r\n    },\r\n}\r\n\r\nexport const getCookie = (name: string) => {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\r\n}","import React from \"react\";\r\nimport {ComputerTypeContext} from \"./App\";\r\n\r\nexport const withComputerType = (Component: typeof React.Component) => (\r\n    (props: any) => (\r\n        <ComputerTypeContext.Consumer>\r\n            { context => <Component computerType={context} {...props}/> }\r\n        </ComputerTypeContext.Consumer>\r\n    )\r\n)","import React from \"react\";\r\nimport { ComputerType, edge } from \"../../react-graph-vis-types\";\r\nimport { getTransitionsTitles, transitionsToLabel } from \"../../utils\";\r\nimport ControlWrapper from \"../ControlWrapper/ControlWrapper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport \"./EdgeControl.css\";\r\nimport Transition from \"./Transition/Transition\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { withComputerType } from \"../../hoc\";\r\nimport { EPS } from \"../../Logic/Computer\";\r\nimport { Move, TransitionParams } from \"../../Logic/IGraphTypes\";\r\nimport { TextareaAutosize } from \"@mui/material\";\r\n\r\n\r\ninterface EdgeControlProps {\r\n    edge: edge | null,\r\n    changeEdgeTransitions: (id: string, transitions: Set<TransitionParams[]>) => void,\r\n    deleteEdge: (id: string) => void,\r\n    computerType: ComputerType | null\r\n    reinitComputer: (() => void)\r\n}\r\n\r\ninterface Rule {\r\n    id: number\r\n    value: string\r\n}\r\n\r\ninterface EdgeControlState {\r\n    prevEdgeId: string | undefined,\r\n    transitions: Set<TransitionParams[]>,\r\n    transitionsText: string,\r\n    displayedTransitionText: string,\r\n    activeTransition: TransitionParams[] | null,\r\n    editMode: boolean,\r\n    countRules?: number,\r\n    rules: Rule[],\r\n}\r\n\r\nclass EdgeControl extends React.Component<EdgeControlProps, EdgeControlState> {\r\n    constructor(props: EdgeControlProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            prevEdgeId: this.props.edge?.id,\r\n            transitions: this.props.edge?.transitions || new Set(),\r\n            transitionsText: getTransitionsTitles(this.props.edge?.transitions || new Set<TransitionParams[]>(), this.props.computerType),\r\n            displayedTransitionText: getTransitionsTitles(this.props.edge?.transitions || new Set<TransitionParams[]>(), this.props.computerType),\r\n            activeTransition: null,\r\n            editMode: false,\r\n            countRules: 1,\r\n            rules: [\r\n                { id: 1, value: ' ' }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<EdgeControlProps>, prevState: Readonly<EdgeControlState>) {\r\n        if (this.props.edge?.id !== prevState.prevEdgeId) {\r\n\r\n            this.setState({\r\n                transitions: this.props.edge?.transitions || new Set(),\r\n                prevEdgeId: this.props.edge?.id,\r\n                transitionsText: getTransitionsTitles(this.props.edge?.transitions || new Set<TransitionParams[]>(), this.props.computerType),\r\n                activeTransition: null,\r\n                editMode: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    selectTransition = (transition: TransitionParams[] | null): void => {\r\n        if (this.state.activeTransition === transition) {\r\n            this.setState({ activeTransition: null });\r\n        } else {\r\n            this.setState({ activeTransition: transition });\r\n        }\r\n    }\r\n\r\n    changeTransitions = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        this.setState({ transitionsText: value });\r\n\r\n        let accumulator: {\r\n            fst: string | undefined,\r\n            snd: string | undefined,\r\n            trd: string | undefined,\r\n            fth: string | undefined\r\n        }[] = []\r\n        let acc: TransitionParams[] = []\r\n\r\n        if (this.props.computerType === \"tm\") {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split('')\r\n                    let fst = tmp.shift()\r\n                    tmp = tmp.join('').split(\"|\" || \">\")\r\n                    let trd = tmp\r\n                    let fth = undefined\r\n\r\n                    let bebra = tmp.join(\"\").split(\">\")\r\n                    bebra.reverse()\r\n                    fth = bebra.shift()\r\n                    bebra.reverse()\r\n                    trd = bebra\r\n\r\n                    accumulator.push({ fst: EPS, snd: fst, trd: trd.join(':'), fth: fth })\r\n                })\r\n\r\n        }\r\n        if (this.props.computerType === \"mealy\" || this.props.computerType === \"dmealy\") {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split(\"|\")\r\n                    let fst = tmp.shift()\r\n                    let snd = tmp.shift()\r\n                    accumulator.push({ fst: fst, snd: snd, trd: undefined, fth: undefined })\r\n                })\r\n\r\n            accumulator.forEach(value => {\r\n                if (value.fst !== undefined) {\r\n                    acc.push(\r\n                        {\r\n                            title: value.fst === 'eps' ? EPS : value.fst,\r\n                            output: value.snd\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split(\",\")\r\n                    let fst = tmp.shift()\r\n                    tmp = tmp.join('').split(\"|\" || \">\")\r\n                    let snd = tmp.shift()\r\n                    let trd = tmp\r\n                    accumulator.push({ fst: fst, snd: snd, trd: trd.join(':'), fth: undefined })\r\n                })\r\n\r\n            accumulator.forEach(value => {\r\n                if (value.fst !== undefined) {\r\n                    acc.push(\r\n                        {\r\n                            title: value.fst === 'eps' ? EPS : value.fst,\r\n                            stackDown: value.snd === 'eps' ? EPS : value.snd,\r\n                            stackPush: value.trd?.split(':').map(value => value === 'eps' ? EPS : value),\r\n                            move: value.fth === 'L' ? Move.L : value.fth === 'R' ? Move.R : undefined\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        let transitions: Set<TransitionParams[]> = new Set<TransitionParams[]>([acc])\r\n\r\n        this.props.changeEdgeTransitions(this.props.edge!.id!, transitions)\r\n        console.log(\"ALLLOO\")\r\n        /////\r\n        // await this.props.reinitComputer()\r\n        ///\r\n        this.setState({\r\n            transitionsText: value\r\n            , transitions: transitions\r\n        }, () => this.props.reinitComputer());\r\n    }\r\n\r\n    deleteEdge = async (): Promise<void> => {\r\n        if (this.props.edge !== null) {\r\n            this.props.deleteEdge(this.props.edge.id!);\r\n        }\r\n        await this.props.reinitComputer()\r\n\r\n    }\r\n\r\n    private addInstruction(value: string) {\r\n        let newRow = { id: this.state.rules.length, value: value };\r\n        this.setState({ rules: this.state.rules.concat(newRow) });\r\n    }\r\n\r\n    changeEditMode = () => {\r\n        this.setState({ editMode: !this.state.editMode });\r\n        this.updateTransitions();\r\n\r\n    }\r\n\r\n    updateTransitions = async () => {\r\n        let accumulator: {\r\n            fst: string | undefined,\r\n            snd: string | undefined,\r\n            trd: string | undefined,\r\n            fth: string | undefined\r\n            out: string | undefined\r\n        }[] = []\r\n\r\n        if (this.props.computerType === \"tm\") {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split('')\r\n                    let fst = tmp.shift()\r\n                    tmp = tmp.join('').split(\"|\" || \">\")\r\n                    let trd = tmp\r\n                    let fth = undefined\r\n\r\n                    let bebra = tmp.join(\"\").split(\">\")\r\n                    bebra.reverse()\r\n                    fth = bebra.shift()\r\n                    bebra.reverse()\r\n                    trd = bebra\r\n                    console.log(\"tmp\")\r\n                    console.log(bebra)\r\n\r\n                    accumulator.push({ fst: EPS, snd: fst, trd: trd.join(':'), fth: fth, out: undefined })\r\n                })\r\n\r\n        }\r\n        if (this.props.computerType === \"mealy\" || this.props.computerType === \"dmealy\") {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split(\"|\")\r\n                    let fst = tmp.shift()\r\n                    let snd = tmp.shift()\r\n                    accumulator.push({ fst: fst, snd: undefined, trd: undefined, fth: undefined, out: snd })\r\n                })\r\n        }\r\n        else {\r\n            this.state.transitionsText\r\n                .split('')\r\n                .filter(x => x !== \" \" && x !== \"\\n\")\r\n                .join('')\r\n                .split(\";\")\r\n                .forEach(value => {\r\n                    let tmp = value.split(\",\")\r\n                    let fst = tmp.shift()\r\n                    tmp = tmp.join('').split(\"|\" || \">\")\r\n                    let snd = tmp.shift()\r\n                    let trd = tmp\r\n                    accumulator.push({ fst: fst, snd: snd, trd: trd.join(':'), fth: undefined, out: undefined })\r\n                })\r\n        }\r\n\r\n\r\n        let acc: TransitionParams[] = []\r\n        accumulator.forEach(value => {\r\n            if (value.fst !== undefined) {\r\n                acc.push(\r\n                    {\r\n                        title: value.fst === 'eps' ? EPS : value.fst,\r\n                        stackDown: value.snd === 'eps' ? EPS : value.snd,\r\n                        stackPush: value.trd?.split(':').map(value => value === 'eps' ? EPS : value),\r\n                        move: value.fth === 'L' ? Move.L : value.fth === 'R' ? Move.R : undefined,\r\n                        output: value.out,\r\n\r\n                    }\r\n                )\r\n            }\r\n        })\r\n\r\n        let transitions: Set<TransitionParams[]> = new Set<TransitionParams[]>([acc])\r\n\r\n        this.setState({\r\n            transitionsText: getTransitionsTitles(transitions, this.props.computerType),\r\n            transitions: transitions\r\n        })\r\n        ///\r\n        await this.props.reinitComputer()\r\n        ///\r\n    }\r\n\r\n    deleteTransition = (): void => {\r\n        if (this.props.edge !== null && this.state.activeTransition !== null) {\r\n            const transitions = this.state.transitions;\r\n            transitions.delete(this.state.activeTransition);\r\n\r\n            this.props.changeEdgeTransitions(this.props.edge.id!, transitions);\r\n            this.setState({ transitions: transitions, transitionsText: getTransitionsTitles(transitions, this.props.computerType) });\r\n        }\r\n    }\r\n\r\n    helperText = () => {\r\n        switch (this.props.computerType) {\r\n            case \"dfa\":\r\n            case \"nfa\":\r\n            case \"nfa-eps\":\r\n            case \"moore\":\r\n            case \"dmoore\":\r\n                return 'Список символов или \"eps\" через точку с запятой';\r\n            case \"dmealy\":\r\n            case \"mealy\":\r\n                return '\"f | n;\", \"eps\" для ε'\r\n            case \"dpda\":\r\n            case \"pda\":\r\n                return '\"a, a | a:Z0;\", \"eps\" для ε. На дне стека \"Z0\"'\r\n            case \"tm\":\r\n                return '\"a | a>R;\", eps для ε. \"R\" - вправо, \"L\" - влево'\r\n            default: \r\n                return '';\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ControlWrapper title=\"Переход\" visible={this.props.edge !== null}>\r\n                <div className=\"edge-control__container\">\r\n                    <div className=\"edge-control__item edge-control__transitions\">\r\n                        {\r\n                            <TextField\r\n                                id=\"filled-multiline-static\"\r\n                                multiline\r\n                                rows={3}\r\n                                variant=\"standard\"\r\n                                label=\"Переходы\"\r\n                                size=\"small\"\r\n                                value={this.state.transitionsText}\r\n                                onChange={this.changeTransitions}\r\n                                helperText={this.helperText()}\r\n                                onBlur={this.updateTransitions}\r\n                            />\r\n                        }\r\n\r\n                        <div className=\"edge-control__edit-transitions\"\r\n                            onClick={this.changeEditMode}>\r\n                            <EditIcon />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"edge-control__item\">\r\n                        <Button\r\n                            onClick={this.deleteEdge}\r\n                        >\r\n                            Удалить\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </ControlWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withComputerType(EdgeControl);","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { ComputerType, graph } from \"../../react-graph-vis-types\";\r\nimport { computersInfo } from \"../../utils\";\r\n\r\nimport { SaveMeta } from \"../../SavesManager/Save\";\r\n\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListSubheader from \"@mui/material/ListSubheader\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport \"./WelcomePopout.css\";\r\n\r\nexport interface WelcomePopoutProps {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    changeComputerType: (computerType: null | ComputerType, graph: graph | null) => void,\r\n}\r\n\r\nexport const WelcomePopout: React.FunctionComponent<WelcomePopoutProps> = (\r\n    {\r\n        open,\r\n        onClose,\r\n        changeComputerType\r\n    }) => {\r\n    // const onCreateTemplateClicked = (type: ComputerType) => {\r\n    //     changeComputerType(type, null);\r\n    //     onClose();\r\n    // }\r\n\r\n    // const onBrowserSaveOpenClicked = async (saveMeta: SaveMeta) => {\r\n    //     const save = await browserSavesManager.getSave(saveMeta);\r\n\r\n    //     if (save) {\r\n    //         changeComputerType(save.save.type, save.save.graph);\r\n    //         onClose();\r\n    //     }\r\n    // }\r\n\r\n    const onCreateEmptyClicked = (type: ComputerType) => {\r\n        changeComputerType(type, { nodes: [], edges: [] });\r\n        onClose();\r\n    }\r\n\r\n    const [cloudSavesMeta, setCloudSavesMeta] = useState<SaveMeta[]>([]);\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\r\n            <DialogTitle>\r\n                <p>Меню</p>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Paper\r\n                    className=\"welcome-popout__body\"\r\n                    variant=\"outlined\"\r\n                >\r\n                    <List dense>\r\n                        {\r\n                            cloudSavesMeta.length !== 0 ?\r\n                                <ListSubheader>\r\n                                    Открыть сохранение в облаке\r\n                                </ListSubheader>\r\n                                : null\r\n                        }\r\n                        <ListSubheader>\r\n                            Создать новый вычислитель\r\n                        </ListSubheader>\r\n                        {\r\n                            Object.entries(computersInfo).map(entry => (\r\n                                <ListItem\r\n                                    key={entry[1].name}\r\n                                    secondaryAction={\r\n                                        <div>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                size=\"small\"\r\n                                                onClick={() => onCreateEmptyClicked(entry[0] as ComputerType)}\r\n                                            >\r\n                                                Создать\r\n                                            </Button>\r\n                                        </div>\r\n                                    }\r\n                                >\r\n                                    <ListItemText primary={entry[1].name} secondary={entry[1].description} />\r\n                                </ListItem>\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </Paper>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default WelcomePopout;\r\n","import SavesManager from \"./SavesManager\";\r\nimport {Save, SaveMeta} from \"./Save\";\r\nimport {ComputerType, graph} from \"../react-graph-vis-types\";\r\n\r\nconst itemName = \"saves\";\r\n\r\nexport default class BrowserSavesManager implements SavesManager {\r\n    getSavesMeta(): Promise<SaveMeta[]> {\r\n        let saves = BrowserSavesManager.getSaves();\r\n\r\n        return new Promise<SaveMeta[]>(function (resolve) {\r\n                resolve(saves);\r\n            }\r\n        )\r\n    }\r\n\r\n    getSave(saveMeta: SaveMeta): Promise<Save | null> {\r\n        let saves = BrowserSavesManager.getSaves();\r\n\r\n        let save = saves.find(save => save.id == saveMeta.id);\r\n\r\n        return new Promise(function (resolve) {\r\n            resolve(save || null);\r\n        });\r\n    }\r\n\r\n    save(name: string, graph: graph, type: ComputerType): Promise<void> {\r\n        if (!localStorage) {\r\n            throw new Error(\"no local storage\");\r\n        }\r\n\r\n        const saves = BrowserSavesManager.getSaves();\r\n        const next_id = (Math.max(...saves.map(save => Number(save.id))) + 1).toString();\r\n        const save_index = saves.findIndex(save => save.name == name);\r\n        const save = {id: \"0\", name: name, save: {graph: graph, type: type}};\r\n\r\n        if (save_index == -1) {\r\n            save.id = next_id;\r\n            saves.push(save);\r\n        } else {\r\n            save.id = saves[save_index].id;\r\n            saves[save_index] = save;\r\n        }\r\n\r\n        let saves_json = JSON.stringify(saves, (key, value) => value instanceof Set ? Array.from(value) : value);\r\n\r\n        localStorage.setItem(itemName, saves_json);\r\n\r\n        return new Promise(function (resolve) {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    private static getSaves(): Save[] {\r\n        if (!localStorage) {\r\n            throw new Error(\"no local storage\");\r\n        }\r\n\r\n        let saves: Save[] = [];\r\n\r\n        try {\r\n            saves = JSON.parse(localStorage.getItem(itemName) || \"\");\r\n        } catch (error) {\r\n            console.warn(\"Invalid saves in local storage: \" + error);\r\n            return [];\r\n        }\r\n\r\n        return saves;\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { ComputerType, graph } from \"../../react-graph-vis-types\";\r\n\r\nimport BrowserSavesManager from \"../../SavesManager/BrowserSavesManager\";\r\nimport { SaveMeta } from \"../../SavesManager/Save\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\n\r\nimport \"./SavingPopout.css\";\r\n\r\nexport interface SavingPopoutProps {\r\n    open: boolean,\r\n    onClose: () => void,\r\n    isLogin: boolean,\r\n    computerType: ComputerType,\r\n    graph: graph,\r\n}\r\n\r\nexport const SavingPopout: React.FunctionComponent<SavingPopoutProps> = (\r\n    {\r\n        open,\r\n        onClose,\r\n        isLogin,\r\n        graph,\r\n        computerType\r\n    }) => {\r\n    const onSavesOriginChanged = (_: React.MouseEvent<HTMLElement>, value: string) => {\r\n        value = value || savesOrigin;\r\n        setSavesOrigin(value);\r\n    }\r\n\r\n    const onSaveNameClicked = (_: React.MouseEvent<HTMLDivElement>, saveMeta: SaveMeta) => {\r\n        setSaveName(saveMeta.name);\r\n    }\r\n\r\n    const onSaveNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        setSaveName(value);\r\n    }\r\n\r\n    const onSaveClicked = (_: React.MouseEvent<HTMLButtonElement>) => {\r\n        switch (savesOrigin) {\r\n            case \"browser\":\r\n                browserSavesManager.save(saveName, graph, computerType);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        updateNames();\r\n        onClose();\r\n    }\r\n\r\n    const updateNames = async () => {\r\n        setLoadingSavesMeta(true);\r\n\r\n        let savesMeta: SaveMeta[] = [];\r\n\r\n        switch (savesOrigin) {\r\n            case \"browser\":\r\n                savesMeta = await browserSavesManager.getSavesMeta();\r\n                break;\r\n            default:\r\n                setSavesMeta([]);\r\n                break;\r\n        }\r\n\r\n        setSavesMeta(savesMeta);\r\n        setLoadingSavesMeta(false);\r\n    }\r\n\r\n    const updateDefaultOrigin = () => {\r\n        setSavesOrigin(isLogin ? \"cloud\" : \"browser\");\r\n    }\r\n\r\n    const [browserSavesManager] = useState<BrowserSavesManager>(new BrowserSavesManager());\r\n    const [savesOrigin, setSavesOrigin] = useState<string>(isLogin ? \"cloud\" : \"browser\");\r\n    const [savesMeta, setSavesMeta] = useState<SaveMeta[]>([]);\r\n    const [loadingSavesMeta, setLoadingSavesMeta] = useState<boolean>(false);\r\n    const [saveName, setSaveName] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            updateDefaultOrigin();\r\n            updateNames();\r\n        }\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n        updateNames();\r\n    }, [savesOrigin]);\r\n\r\n    useEffect(() => {\r\n        setSaveName(\"\");\r\n    }, [savesOrigin, open]);\r\n\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose}>\r\n            <DialogTitle>\r\n                <p>Сохранение</p>\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n                <div className=\"saving-popout__body\">\r\n                    <div className=\"saving-popout__body__sidebar\">\r\n                        <ToggleButtonGroup\r\n                            orientation=\"vertical\"\r\n                            exclusive\r\n                            value={savesOrigin}\r\n                            onChange={onSavesOriginChanged}\r\n                        >\r\n                            <ToggleButton value=\"cloud\" disabled={!isLogin}>Облако</ToggleButton>\r\n                            <ToggleButton value=\"browser\">Браузер</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </div>\r\n\r\n                    <div className=\"saving-popout__body__main\">\r\n                        <Paper\r\n                            className=\"saving-popout__body__main__paper\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            {\r\n                                loadingSavesMeta\r\n                                    ?\r\n                                    <div className=\"saving-popout__body__main__skeleton\">\r\n                                        <Skeleton\r\n                                            className=\"saving-popout__body__main__skeleton__bar\"\r\n                                            animation=\"wave\"\r\n                                            variant=\"rectangular\"\r\n                                            height=\"36\"\r\n                                        />\r\n\r\n                                        <Skeleton\r\n                                            className=\"saving-popout__body__main__skeleton__bar\"\r\n                                            animation=\"wave\"\r\n                                            variant=\"rectangular\"\r\n                                            height=\"36\"\r\n                                        />\r\n\r\n                                        <Skeleton\r\n                                            className=\"saving-popout__body__main__skeleton__bar\"\r\n                                            animation=\"wave\"\r\n                                            variant=\"rectangular\"\r\n                                            height=\"36\"\r\n                                        />\r\n                                    </div>\r\n                                    :\r\n                                    <List dense>\r\n                                        {\r\n                                            savesMeta.map(saveMeta => (\r\n                                                <ListItem\r\n                                                    key={saveMeta.id}\r\n                                                    disablePadding\r\n                                                >\r\n                                                    <ListItemButton onClick={e => onSaveNameClicked(e, saveMeta)}>\r\n                                                        <ListItemText primary={saveMeta.name} />\r\n                                                    </ListItemButton>\r\n                                                </ListItem>\r\n                                            ))\r\n                                        }\r\n                                    </List>\r\n                            }\r\n\r\n                        </Paper>\r\n                    </div>\r\n                </div>\r\n\r\n                <TextField\r\n                    className=\"saving-popout__save-name-input\"\r\n                    variant=\"standard\"\r\n                    size=\"small\"\r\n                    label=\"Имя сохранения\"\r\n                    value={saveName}\r\n                    onChange={onSaveNameChanged}\r\n                />\r\n\r\n                <DialogActions>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={onSaveClicked}\r\n                    >\r\n                        Сохранить\r\n                    </Button>\r\n\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={onClose}\r\n                    >\r\n                        Отмена\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default SavingPopout;","import React, { FC, useEffect, useState } from \"react\";\r\nimport \"./RegisterPage.css\";\r\nimport { Alert, Button, Container, Stack, TextField, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface RegisterPageProps {\r\n}\r\n\r\nconst RegisterPage: FC<RegisterPageProps> = ({ }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const [email, setEmail] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [about, setAbout] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onEmailChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        setEmail(value);\r\n    }\r\n\r\n    const onPasswordChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        setPassword(value);\r\n    }\r\n\r\n    const onAboutChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        setAbout(value);\r\n    }\r\n\r\n    const onRegisterClicked = async () => {\r\n        const request = {\r\n            email: email,\r\n            password: password,\r\n            about: about,\r\n        };\r\n\r\n    }\r\n\r\n    const onLoginClicked = () => {\r\n        navigate(\"/login\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        setError(null);\r\n    }, [email, password, about]);\r\n\r\n    return (\r\n        <div className=\"login-page\">\r\n            <Container maxWidth=\"xs\">\r\n                <Stack\r\n                    spacing={1}\r\n                    justifyContent=\"center\"\r\n                    style={{ minHeight: '100vh' }}\r\n                >\r\n                    <Typography variant=\"h5\" align=\"center\" sx={{ paddingBottom: \"24px\" }}>Новый аккаунт</Typography>\r\n\r\n                    {\r\n                        error && <Alert severity=\"error\">{error}</Alert>\r\n                    }\r\n\r\n                    <TextField size=\"small\"\r\n                        label=\"Электропочта\"\r\n                        type=\"email\"\r\n                        value={email}\r\n                        onChange={onEmailChanged}\r\n                    />\r\n\r\n                    <TextField size=\"small\"\r\n                        label=\"Пароль\"\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={onPasswordChanged}\r\n                    />\r\n\r\n                    <TextField label=\"О себе\"\r\n                        type=\"text\"\r\n                        multiline\r\n                        rows={3}\r\n                        value={about}\r\n                        onChange={onAboutChanged}\r\n                    />\r\n\r\n                    <Button variant=\"contained\"\r\n                        onClick={onRegisterClicked}\r\n                    >\r\n                        Зарегистрироваться\r\n                    </Button>\r\n\r\n                    <Typography variant=\"overline\" align=\"center\">или</Typography>\r\n\r\n                    <Button variant=\"outlined\"\r\n                        onClick={onLoginClicked}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                </Stack>\r\n            </Container>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RegisterPage;","import React from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\n\r\nimport \"./AppHeader.css\";\r\n\r\nexport interface AppHeaderProps {\r\n    onMenuButtonClicked: (event: React.MouseEvent) => void,\r\n    onSaveButtonClicked: (event: React.MouseEvent) => void,\r\n    isLogin: boolean,\r\n}\r\n\r\nexport const AppHeader: React.FunctionComponent<AppHeaderProps> = (\r\n    {\r\n        onMenuButtonClicked,\r\n    }) => {\r\n    return (\r\n        <AppBar position=\"sticky\">\r\n            <Toolbar variant=\"dense\">\r\n                <div className=\"app__header__left\">\r\n                    <Button className=\"app__header__button\"\r\n                        color=\"inherit\"\r\n                        onClick={onMenuButtonClicked}\r\n                    >\r\n                        Меню\r\n                    </Button>\r\n                    {/* <Button className=\"app__header__button\"\r\n                        color=\"inherit\"\r\n                        onClick={onSaveButtonClicked}\r\n                    >\r\n                        Сохранить\r\n                    </Button> */}\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React, { FC } from \"react\";\r\nimport \"./RegisteredPage.css\";\r\nimport { Button, Container, Stack, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface RegisteredPageProps {\r\n}\r\n\r\nconst RegisteredPage: FC<RegisteredPageProps> = ({ }) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onLoginClicked = () => {\r\n        navigate(\"/login\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"registered-page\">\r\n            <Container maxWidth=\"xs\">\r\n                <Stack\r\n                    spacing={1}\r\n                    justifyContent=\"center\"\r\n                    style={{ minHeight: '100vh' }}\r\n                >\r\n                    <Typography variant=\"h5\" align=\"center\" sx={{ paddingBottom: \"24px\" }}>\r\n                        Новый аккаунт создан\r\n                    </Typography>\r\n\r\n                    <Button variant=\"outlined\"\r\n                        onClick={onLoginClicked}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                </Stack>\r\n            </Container>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RegisteredPage;","import React, { useEffect, useRef, useState, useLayoutEffect, useCallback } from \"react\";\r\nimport {\r\n    Network,\r\n    Options,\r\n    Data, \r\n} from \"vis-network/peer\";\r\nimport { DataSet } from \"vis-data/peer\";\r\nimport { Timeline } from \"vis-timeline/peer\";\r\nimport { Move, NodeCore } from \"./Logic/IGraphTypes\";\r\nimport { edge, graph, node } from \"./react-graph-vis-types\";\r\nimport { Menu, MenuItem, MenuList, Paper, Typography } from \"@mui/material\";\r\nimport { useKey } from \"rooks\";\r\n\r\ninterface PropsVisNet {\r\n    nodes: DataSet<node>,\r\n    edges: DataSet<edge>,\r\n    data: { nodes: DataSet<node, \"id\">, edges: DataSet<edge, \"id\"> },\r\n    onDoubleClick: (params?: any) => void,\r\n    onClick1: (params?: any) => void,\r\n    onClick2: (params?: any) => void,\r\n    onClick3: (params?: any) => void,\r\n    onClick4: (params?: any) => void,\r\n    network: any,\r\n    contextMenu?: any\r\n}\r\n\r\nexport const MyUseKey = (key: any, condition: boolean) => {\r\n    const [isKeyPressed, setIsKeyPressed] = useState(false)\r\n\r\n    const downHadler = (k: any) => {\r\n        if (key === k) setIsKeyPressed(true)\r\n    }\r\n\r\n    const upHadler = (k: any) => {\r\n        if (key !== k) setIsKeyPressed(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (condition) {\r\n            window.addEventListener('keydown', downHadler)\r\n            window.addEventListener('keyup', upHadler)\r\n\r\n            return () => {\r\n                window.removeEventListener('keydown', downHadler)\r\n                window.removeEventListener('keyup', upHadler)\r\n            }\r\n        }\r\n    }, [])\r\n    return isKeyPressed\r\n}\r\n\r\nexport const VisNetwork = (props: PropsVisNet) => {\r\n    // A reference to the div rendered by this component\r\n    const [domNode, setdomNode] = useState(useRef<HTMLDivElement>(null));\r\n\r\n    const [options, setOptions] = useState<Options>({\r\n        edges: {\r\n            smooth: {\r\n                enabled: true,\r\n                type: \"discrete\",\r\n                roundness: 0.5\r\n            },\r\n            color: \"#000000\",\r\n            width: 0.5,\r\n            arrows: {\r\n                to: {\r\n                    enabled: true,\r\n                    scaleFactor: 0.5\r\n                }\r\n            },\r\n            length: 200\r\n        },\r\n        manipulation: {\r\n            enabled: false,\r\n            addEdge: function (data: { from: any; to: any; }, callback: (arg0: any) => void) {\r\n                console.log('add edge', data);\r\n                callback(data);\r\n                setKeyPressed(false)\r\n                props.network.current.disableEditMode()\r\n            }\r\n\r\n        },\r\n        layout: { improvedLayout: false },\r\n        nodes: {\r\n            shapeProperties: {\r\n                interpolation: false\r\n            },\r\n            shape: \"circle\",\r\n            font: \"18px Roboto black\",\r\n            labelHighlightBold: false,\r\n            size: 40,\r\n            borderWidth: 2,\r\n            color: {\r\n                background: \"#ffffff\",\r\n                border: \"#000000\",\r\n                highlight: {\r\n                    border: \"#000000\",\r\n                    background: \"#ffffff\"\r\n                }\r\n            },\r\n        },\r\n        physics: {\r\n            enabled: false\r\n        }\r\n    });\r\n\r\n    const [contextMenu, setContextMenu] = React.useState<{ mouseX: any, mouseY: any } | null>(null);\r\n\r\n    const handleContextMenu = (event: { preventDefault: () => void; clientX: number; clientY: number; }) => {\r\n        event.preventDefault();\r\n        setContextMenu(\r\n            contextMenu === null\r\n                ? {\r\n                    mouseX: event.clientX - 2,\r\n                    mouseY: event.clientY - 4,\r\n                }\r\n                : null,\r\n        );\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setContextMenu(null);\r\n    };\r\n\r\n    const [keyPressed, setKeyPressed] = useState<boolean>(false);\r\n\r\n    const handleUserKeyPress = useCallback(event => {\r\n        if (event.keyCode === 17) {\r\n            if (!keyPressed) {\r\n                console.log('handleUserKeyPress')\r\n                props.network.current.addEdgeMode();\r\n                setKeyPressed(true);\r\n                console.log('-->' + keyPressed)\r\n            }\r\n        }\r\n    }, [keyPressed]);\r\n\r\n\r\n    const handleUserKeyUnPress = useCallback(event => {\r\n        if (event.keyCode === 17) {\r\n            if (keyPressed) {\r\n                console.log('handleUserKeyUnPress')\r\n                props.network.current.disableEditMode();\r\n                setKeyPressed(false);\r\n                console.log('-->' + keyPressed)\r\n            }\r\n        }\r\n    }, [keyPressed]);\r\n\r\n\r\n  const [container, _co] = useState(useRef<HTMLDivElement>(null)) ;\r\n\r\n  const items = new DataSet([\r\n    { id: 1, content: \"item 1\", start: \"2014-04-20\" },\r\n    { id: 2, content: \"item 2\", start: \"2014-04-14\" },\r\n    { id: 3, content: \"item 3\", start: \"2014-04-18\" },\r\n    { id: 4, content: \"item 4\", start: \"2014-04-16\", end: \"2014-04-19\" },\r\n    { id: 5, content: \"item 5\", start: \"2014-04-25\" },\r\n    { id: 6, content: \"item 6\", start: \"2014-04-27\", type: \"point\" }\r\n  ]);\r\n\r\n  const timeLineOptions = {};\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleUserKeyPress);\r\n        window.addEventListener(\"keyup\", handleUserKeyUnPress);\r\n        \r\n        console.log('--' + keyPressed)\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleUserKeyPress);\r\n            window.removeEventListener(\"keyup\", handleUserKeyUnPress);\r\n        };\r\n    }, [handleUserKeyPress])\r\n\r\n    const timeline = React.createRef<Timeline | null>();\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        if (domNode.current) {\r\n            props.network.current = new Network(domNode.current, props.data, options);\r\n            console.log(\"HERE<-domNode.current\")\r\n        }\r\n\r\n        console.log(\"HERE<-\")\r\n        window.addEventListener(\"contextmenu\", e => e.preventDefault());\r\n\r\n        if (props.network.current) {\r\n            props.network.current.on('doubleClick', (params: any) => {\r\n                setKeyPressed(false)\r\n                props.onDoubleClick(params)\r\n            })\r\n            props.network.current.on('click', props.onClick1);\r\n            props.network.current.on('click', props.onClick2);\r\n            props.network.current.on('click', props.onClick3);\r\n            props.network.current.on('click', props.onClick4);\r\n            props.network.current.on('click', props.onClick4);\r\n\r\n            props.network.current.on('dragging', () => {\r\n                props.network.current.unselectAll();\r\n            });\r\n\r\n\r\n            props.network.current.on('controlNodeDragging', () => {\r\n                props.network.current.unselectAll();\r\n            });\r\n            \r\n        }\r\n\r\n\r\n    }, [domNode, props.data, props.network, options]);\r\n\r\n    const refContainer = () => {\r\n        return (\r\n            <div id={\"network\"}\r\n                style={{\r\n                    height: \"100%\",\r\n                    width: \"100%\",\r\n                }}\r\n                ref={domNode}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        props.contextMenu === undefined\r\n            ?\r\n            refContainer()\r\n            :\r\n            <div onContextMenu={handleContextMenu}\r\n                style={{\r\n                    height: \"100%\",\r\n                    width: \"100%\",\r\n                }}>\r\n                {refContainer()}\r\n                <Menu\r\n                    open={contextMenu !== null}\r\n                    onClose={handleClose}\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={\r\n                        contextMenu !== null\r\n                            ? { top: contextMenu.mouseY, left: contextMenu.mouseX }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.contextMenu(handleClose, handleContextMenu)}\r\n                </Menu>\r\n            </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport { useEffect } from 'react';\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nexport const NonDetermenisticModal = (props: { isNonDetermenistic: boolean, setIsNonDetermenistic: (v: boolean) => void }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    useEffect(() => {\r\n        if (props.isNonDetermenistic) {\r\n            setOpen(props.isNonDetermenistic)\r\n            props.setIsNonDetermenistic(false)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                        Ошибка\r\n                    </Typography>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        Недетерменизм\r\n                    </Typography>\r\n                </Box>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const NonMinimizableModal = (props: { isNonMinimizable: boolean, setIsNonMinimizable: (v: boolean) => void }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    useEffect(() => {\r\n        if (props.isNonMinimizable) {\r\n            setOpen(props.isNonMinimizable)\r\n            props.setIsNonMinimizable(false)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                        Ошибка\r\n                    </Typography>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        Невозможно минимизровать\r\n                    </Typography>\r\n                </Box>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import React, { FC, useState } from \"react\";\r\nimport { UserModel } from \"../../../Models/UserModel\";\r\nimport { SaveModel } from \"../../../Models/SaveModel\";\r\nimport \"./UserPage.css\";\r\nimport { Alert, Button, Container, Dialog, DialogContent, DialogContentText, DialogTitle, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from \"@mui/material\";\r\nimport { ComputerType, graph } from \"../../../react-graph-vis-types\";\r\n\r\n\r\n\r\ninterface UserPageProps {\r\n    changeComputerType: (computerType: null | ComputerType, graph: graph | null) => void\r\n}\r\n\r\n\r\nconst UserPage: FC<UserPageProps> = ({ changeComputerType }) => {\r\n    const [user, setUser] = useState<UserModel | null>(null);\r\n    const [saves, setSaves] = useState<SaveModel[]>([]);\r\n    const [cloneDialogOpen, setCloneDialogOpen] = useState<boolean>(false);\r\n    const [saveToCloneId, setSaveToCloneId] = useState<string | null>(null);\r\n    const [clonedSave, setClonedSave] = useState<SaveModel | null>(null);\r\n\r\n    const onCloneClicked = (id: string) => {\r\n        setSaveToCloneId(id);\r\n        setCloneDialogOpen(true);\r\n    }\r\n\r\n    const onCloneDialogClose = () => {\r\n        setCloneDialogOpen(false);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        user &&\r\n        <div className=\"me-page\">\r\n            <Dialog open={cloneDialogOpen} onClose={onCloneDialogClose}>\r\n                <DialogTitle>Клонирование сохранения</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Копия сохранения появится в списке сохранений. Вы сможете изменять его независимо. Хотите продолжить?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Button onClick={() => onCloneDialogClose()}>Нет</Button>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            <Container>\r\n                <Stack spacing={4}>\r\n                    <Stack spacing={1}>\r\n                        <Typography variant=\"h5\">Аккаунт</Typography>\r\n                        <Stack>\r\n                            <Typography variant=\"body1\">О себе: {user.about}</Typography>\r\n                        </Stack>\r\n                    </Stack>\r\n                    <Stack spacing={1}>\r\n                        <Typography variant=\"h5\">Сохранения</Typography>\r\n                        {\r\n                            saves.length > 0 &&\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Название</TableCell>\r\n                                            <TableCell>Время создания</TableCell>\r\n                                            <TableCell>Время изменения</TableCell>\r\n                                            <TableCell>Клонирование</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {\r\n                                            saves.map(save => (\r\n                                                <TableRow key={save.id}>\r\n                                                    <TableCell>\r\n                                                        {save.name}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {new Date(save.createdDateTime).toLocaleString('ru-ru')}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {new Date(save.lastModifiedDateTime).toLocaleString('ru-ru')}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        <Button size=\"small\" onClick={() => onCloneClicked(save.id)}>\r\n                                                            Клонировать себе\r\n                                                        </Button>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        }\r\n                        {\r\n                            saves.length === 0 &&\r\n                            <Alert severity=\"warning\" icon={false}>\r\n                                Пользователь ещё не поделился своими сохранениями\r\n                            </Alert>\r\n                        }\r\n                    </Stack>\r\n                </Stack>\r\n            </Container>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserPage;","export const computerAction = {\r\n    init: (() => { }),\r\n    nfaToDfa: (() => { }),\r\n    minimizeDfa: (() => { }),\r\n    mooreToMealy: (() => { }),\r\n    mealyToMoore: (() => { })\r\n}\r\n\r\nexport const controlAction = {\r\n    changerByStack: (() => { }),\r\n    run: (() => { }),\r\n    step: (() => { }),\r\n    reset: (() => { }),\r\n}","import { ComputerType } from \"./react-graph-vis-types\"\r\nimport React, { ReactNode } from 'react';\r\n\r\ninterface RibbonProps {\r\n    computerType: null | ComputerType,\r\n    wasComputerResetted: boolean,\r\n    mem: string[] | undefined,\r\n    ptr: number | undefined\r\n    memRef: React.RefObject<HTMLDivElement>\r\n}\r\n\r\nexport const Ribbon = (props: RibbonProps) => {\r\n    return (\r\n        props.computerType === \"tm\" && props.wasComputerResetted\r\n            ?\r\n            <div className=\"app__mem_ribbon\">\r\n                {\r\n                    props.mem?.map((value, index) =>\r\n                        <div\r\n                            className=\"app__mem_cell\"\r\n                            style={{ border: `${index === props.ptr ? \"#0041d0\" : \"#000000\"} 2px solid` }}\r\n                        >\r\n                            {Math.abs(Math.abs(index) - Math.abs(props.ptr!)) <= 5\r\n                                ? <div ref={props.memRef} />\r\n                                : <div />\r\n                            }\r\n                            {value}\r\n                            {props.memRef?.current?.scrollIntoView({ behavior: 'smooth' })}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            : <div />\r\n    )\r\n}\r\n","import { EdgeCore, GraphCore, GraphEvalMultiStart, NodeCore, TransitionParams } from \"./IGraphTypes\";\r\nimport { OutputAutomata } from \"./OutputAutomata\";\r\nimport { Output } from \"./Types\";\r\n\r\nexport class Mealy extends OutputAutomata {\r\n    constructor(graph: GraphCore, startStatements: NodeCore[], input: string[]) {\r\n        super(graph, startStatements, input)\r\n    }\r\n\r\n    public mealyToMoore = (): GraphEvalMultiStart => {\r\n        const outs: Map<Output, number> = new Map()\r\n        this.edges.forEach((edge) => {\r\n            edge.transitions.forEach((_) => _.forEach((transition) => {\r\n                const out = transition.output!\r\n                if (!outs.has(out)) {\r\n                    outs.set(out, outs.size)\r\n                }\r\n            }))\r\n        })\r\n\r\n        const outNumbs: Output[] = []\r\n        outs.forEach((v, k) => outNumbs.push(k))\r\n\r\n        console.log(outs)\r\n        console.log(outNumbs)\r\n\r\n        type outEdge = {\r\n            from: number,\r\n            to: number,\r\n            title: string,\r\n            output: Output\r\n        }\r\n\r\n        const diffEdges = this.edges.reduce(((acc, edge) => {\r\n            const tmp: outEdge[] = []\r\n\r\n            edge.transitions.forEach((t) => t.forEach((v) => tmp.push({\r\n                from: edge.from,\r\n                to: edge.to,\r\n                title: v.title,\r\n                output: v.output ? v.output : ''\r\n            })))\r\n\r\n            tmp.forEach((v) => acc.push(v))\r\n\r\n            return acc\r\n        }), new Array<outEdge>())\r\n\r\n\r\n        const toOuts = new Map<number, number[]>()\r\n        this.nodes.forEach((v) =>\r\n            toOuts.set(v.id, new Array<number>(outs.size).fill(-1)))\r\n        let count = 1;\r\n        diffEdges.forEach((edge) => {\r\n            if (toOuts.get(edge.to) === undefined) {\r\n                throw new Error(\"Mealy to Moore\");\r\n            } else {\r\n                if (toOuts.get(edge.to)![outs.get(edge.output)!] === -1) {\r\n                    toOuts.get(edge.to)![outs.get(edge.output)!] = count\r\n                    count++\r\n                }\r\n            }\r\n        })\r\n\r\n        const nodesMoore: NodeCore[] = []\r\n        toOuts.forEach((v, key) => v\r\n            .map((v, k) => ({ value: v, out: outNumbs[k] }))\r\n            .filter((v) => v.value !== -1)\r\n            .forEach((v) => {\r\n\r\n                nodesMoore.push({\r\n                    ...this.nodes.find((node) => node.id === key)!,\r\n                    id: v.value,\r\n                    output: v.out\r\n                })\r\n            })\r\n        )\r\n\r\n        type mooreEdge = {\r\n            from: number,\r\n            to: number,\r\n            title: string,\r\n        }\r\n\r\n        const outEdges = diffEdges.reduce((acc, v) => {\r\n            if (toOuts.get(v.from) === undefined) {\r\n                throw new Error(\"Mealy to Moore\");\r\n            } else {\r\n                const mooreIds = toOuts.get(v.from)!.filter((id) => id !== -1)\r\n                mooreIds.forEach((id) => {\r\n                    const idLetter = outs.get(v.output)!\r\n                    acc.push({\r\n                        from: id,\r\n                        to: toOuts.get(v.to)![idLetter],\r\n                        title: v.title\r\n                    })\r\n                })\r\n                return acc\r\n            }\r\n        }, new Array<mooreEdge>())\r\n\r\n        const startNodes = this.startStatements.map(v => this.nodes[v.id])\r\n\r\n        const startMoore: NodeCore[] = []\r\n        startNodes.forEach((v) =>\r\n            toOuts.get(v.id)?.filter((v) => v !== -1)\r\n                .forEach((v) => startMoore.push(nodesMoore.find((node) => node.id === v)!)))\r\n\r\n        const edgesMoore: EdgeCore[] = []\r\n        outEdges.sort((a, b) => a.from - b.from || a.to - b.to)\r\n\r\n        for (let i = 0; i < outEdges.length; i++) {\r\n            const acc: TransitionParams[] = []\r\n            let delta = 0\r\n            let j = i\r\n            while (j < outEdges.length && outEdges[i].from === outEdges[j].from && outEdges[i].to === outEdges[j].to) {\r\n                acc.push({ title: outEdges[j].title })\r\n\r\n                j++\r\n            }\r\n            i = j - 1\r\n\r\n            edgesMoore.push({\r\n                from: outEdges[i].from,\r\n                to: outEdges[i].to,\r\n                transitions: new Set<TransitionParams[]>([acc])\r\n            })\r\n\r\n        }\r\n\r\n\r\n        return {\r\n            graphcore: { edges: edgesMoore, nodes: nodesMoore },\r\n            start: startMoore\r\n        }\r\n    }\r\n\r\n    step = this.oaStep\r\n\r\n    run = this.oaRun\r\n\r\n}\r\n","import { Computer, EPS } from \"./Computer\";\r\nimport { GraphCore, NodeCore } from \"./IGraphTypes\";\r\nimport { Output, position, Step, History, HistTrace } from \"./Types\";\r\n\r\nexport abstract class OutputAutomata extends Computer {\r\n    protected curPosition: position[]\r\n\r\n    constructor(graph: GraphCore, startStatements: NodeCore[], input: string[]) {\r\n        super(graph, startStatements)\r\n\r\n        this.curPosition = []\r\n        startStatements.forEach(value => {\r\n            this.curPosition.push({\r\n                stmt: this.statements.get(value.id),\r\n            })\r\n        })\r\n        this.setInput(input)\r\n        this.counterSteps = 0\r\n\r\n        console.log(\"ALPHBT\")\r\n        this.alphabet.forEach((value, key) => console.log(value, key))\r\n        console.log(\"STMTS\")\r\n        this.statements.forEach(value => console.log(value))\r\n        console.log(this.curPosition)\r\n        this.matrix.forEach(value => {\r\n            console.log()\r\n            value.forEach(value1 => console.log(value1))\r\n        })\r\n    }\r\n\r\n    isDeterministic(): boolean {\r\n        let ret = true\r\n        this.matrix.forEach((line) => line.forEach((cells) => {\r\n            const fstCell = cells[0]\r\n            const hasDublicates = cells.reduce((acc: any, stmt: any) => acc || (stmt.stackDown === fstCell.stackDown), false)\r\n\r\n            if (cells.length > 1 && hasDublicates) {\r\n                ret = false\r\n            }\r\n        }))\r\n        return ret\r\n    }\r\n\r\n    public haveEpsilon = () => this.alphabet.get(EPS) !== undefined\r\n\r\n    public restart = () => {\r\n        this.counterSteps = 0\r\n        this.historiStep = []\r\n        this.curPosition = []\r\n        this.startStatements.forEach(value => {\r\n            this.curPosition.push({\r\n                stmt: this.statements.get(value.id),\r\n            })\r\n        })\r\n    }\r\n\r\n    oaRun = (): Step => {\r\n        const histTrace: HistTrace[] = []\r\n\r\n        this.historiRun = []\r\n        this.counterStepsForResult = 0\r\n\r\n        let output\r\n        for (let i = 0; i < this.input.length; i++) {\r\n            const ref = {\r\n                counterSteps: this.counterStepsForResult,\r\n                curPosition: this.curPosition,\r\n                historiStep: this.historiRun\r\n            }\r\n            const after = this._step(ref, histTrace)\r\n            this.counterStepsForResult = ref.counterSteps\r\n            console.log(this.counterStepsForResult)\r\n            this.curPosition = ref.curPosition\r\n            this.historiRun = ref.historiStep\r\n            output = after.output\r\n        }\r\n\r\n        return {\r\n            counter: this.counterStepsForResult,\r\n            history: this.historiRun,\r\n            isAdmit: this.haveAdmitting(this.curPosition),\r\n            nodes: this.toNodes(this.curPosition),\r\n            output: output,\r\n            histTrace\r\n        }\r\n    }\r\n\r\n    protected toNodes(positions: position[]): NodeCore[] {\r\n        let retNodes: NodeCore[] = []\r\n        positions.forEach(value => {\r\n            let temp: NodeCore = {\r\n                ...this.nodes[value.stmt.idLogic],\r\n                from: value.from,\r\n                cur: value.cur,\r\n                by: value.by,\r\n                output: value.output,\r\n                stack: value.stack === undefined ? undefined : value.stack.getStorage()\r\n            }\r\n            retNodes.push(temp)\r\n        })\r\n        return retNodes\r\n    }\r\n\r\n    protected haveAdmitting(positions: position[]): boolean {\r\n        return positions.reduce((acc: boolean, p) => acc && p.stmt.isAdmit, true)\r\n    }\r\n\r\n    protected nextStepPosition = (position: position, by: number): { position: position, output: Output | undefined }[] => {\r\n        return this.cellMatrix(position.stmt.idLogic, by).map(v => {\r\n            const getLetter = (id: number): any => {\r\n                let ret\r\n                this.alphabet.forEach((v, k) => {\r\n                    if (id === v) {\r\n                        ret = k\r\n                    }\r\n                })\r\n                return ret\r\n            }\r\n\r\n            const ret: position = {\r\n                stmt: v,\r\n                by: getLetter(by),\r\n                cur: this.nodes[v.idLogic],\r\n                from: this.nodes[position.stmt.idLogic]\r\n            }\r\n            return ({ position: ret, output: v.output })\r\n        })\r\n    }\r\n\r\n    protected nextStepPositions = (positions: position[], by: number): { positions: position[], outputs: Output[] } => {\r\n        const nextPOs = positions.map((v) => this.nextStepPosition(v, by))\r\n        const nextPs = nextPOs.reduce((acc: position[], pos) => {\r\n            pos.forEach(po => acc.push(po.position))\r\n            return acc\r\n        }, [])\r\n        const nextOs = nextPOs.reduce((acc: Output[], pos) => {\r\n            pos.forEach(po => {\r\n                if (po.output === undefined) {\r\n                    throw new Error(\"Output undefinded\")\r\n                }\r\n                acc.push(po.output)\r\n            })\r\n            return acc\r\n        }, [])\r\n        nextPs.forEach((v, index) => v.output = nextOs[index])\r\n        return { positions: nextPs, outputs: nextOs }\r\n    }\r\n\r\n    protected _step = (ref: { counterSteps: number, curPosition: position[], historiStep: History[] }, histTrace: HistTrace[]) => {\r\n        const byLetter: NodeCore[] = []\r\n\r\n        const trNum = this.alphabet.get(this.input[ref.counterSteps]?.value)\r\n        const nextPositions = this.nextStepPositions(ref.curPosition, trNum)\r\n\r\n        ref.curPosition = nextPositions.positions\r\n\r\n        const nodesOfCurPos: NodeCore[] = this.toNodes(ref.curPosition)\r\n        nodesOfCurPos.forEach((node) => byLetter.push(node))\r\n\r\n        ref.historiStep.push({ nodes: nodesOfCurPos, by: trNum })\r\n        if (ref.curPosition.length > 0) {\r\n            ref.counterSteps++\r\n        }\r\n\r\n        console.log('--->byLetter')\r\n        console.log(byLetter)\r\n        console.log('--->byLetter')\r\n\r\n        histTrace.push({ byLetter })\r\n\r\n\r\n        return {\r\n            counter: ref.counterSteps,\r\n            history: ref.historiStep,\r\n            isAdmit: this.haveAdmitting(ref.curPosition),\r\n            nodes: nodesOfCurPos,\r\n            output: nextPositions.outputs,\r\n            byLetter,\r\n            histTrace\r\n        }\r\n    }\r\n\r\n    oaStep = (): Step => {\r\n        const ref = {\r\n            counterSteps: this.counterSteps,\r\n            curPosition: this.curPosition,\r\n            historiStep: this.historiStep\r\n        }\r\n        const after = this._step(ref, [])\r\n        this.counterSteps = ref.counterSteps\r\n        this.curPosition = ref.curPosition\r\n        this.historiStep = ref.historiStep\r\n\r\n        return {\r\n            counter: after.counter,\r\n            history: after.history,\r\n            isAdmit: after.isAdmit,\r\n            nodes: after.nodes,\r\n            output: after.output,\r\n            byLetter: after.byLetter\r\n        }\r\n    }\r\n\r\n    public setInput = (input: string[]) => {\r\n        this.input = []\r\n        input.forEach(value => {\r\n            this.input.push({ idLogic: this.alphabet.get(value), value: value })\r\n        })\r\n        this.restart()\r\n    }\r\n\r\n}\r\n","import React, { ChangeEvent } from \"react\";\r\n\r\nimport { node } from \"../../react-graph-vis-types\";\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport const History = (props: {\r\n    startNode: node, history: {\r\n        node: node;\r\n        note: string[] | undefined;\r\n    }[][], historyEndRef: any\r\n}) => {\r\n    return (\r\n        <div className=\"run-control__item run-control__history\">\r\n            {\r\n                props.history.length !== 0 &&\r\n                <div className=\"run-control__history__scroll\">\r\n                    {\r\n                        props.startNode !== undefined\r\n                            ?\r\n                            <div className=\"run-control__history__row\" key={0}>\r\n                                <span className=\"run-control__history__index\">{0}</span>\r\n                                {\r\n                                    <Tooltip\r\n                                        title={<Typography className=\"display-linebreak\">{\"~\"}</Typography>}>\r\n                                        <div\r\n                                            className=\"run-control__history__node\"\r\n                                            style={{ border: `${props.startNode.isInitial ? \"#0041d0\" : props.startNode.isAdmit ? \"#ff0072\" : \"#000000\"} 2px solid` }}\r\n                                        >\r\n                                            {props.startNode!.label}\r\n\r\n                                        </div>\r\n                                    </Tooltip>\r\n                                }\r\n\r\n                            </div>\r\n                            : <div />\r\n                    }\r\n\r\n                    {\r\n                        props.history.map((nodes, index) => (\r\n                            <div className=\"run-control__history__row\" key={index}>\r\n                                <span className=\"run-control__history__index\">{index + 1}</span>\r\n                                {\r\n                                    nodes.map((node, index) => (\r\n                                        <Tooltip\r\n                                            title={<Typography className=\"display-linebreak\">{node.note !== undefined ? node.note.join('\\n') : ''}</Typography>}>\r\n                                            <div\r\n                                                className=\"run-control__history__node\"\r\n                                                style={{ border: `${node.node.isInitial ? \"#0041d0\" : node.node.isAdmit ? \"#ff0072\" : \"#000000\"} 2px solid` }}\r\n                                            >\r\n                                                {node.node.label}\r\n\r\n                                            </div>\r\n                                        </Tooltip>\r\n                                    ))\r\n                                }\r\n\r\n                            </div>\r\n                        ))\r\n\r\n                    }\r\n                    <div>\r\n                        <div ref={props.historyEndRef} />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>)\r\n}\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { ComputerType, graph, node } from \"../../react-graph-vis-types\";\r\nimport { isEqual } from \"lodash\";\r\nimport { withComputerType } from \"../../hoc\";\r\nimport { Computer, EPS } from \"../../Logic/Computer\";\r\nimport ControlWrapper from \"../ControlWrapper/ControlWrapper\";\r\nimport \"./RunControl.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport { Elements } from \"../../App\";\r\nimport { elementsToGraph, graphToElements } from \"../../utils\";\r\nimport { Output, Step } from \"../../Logic/Types\";\r\nimport { GraphEval, GraphEvalMultiStart, Move, NodeCore } from \"../../Logic/IGraphTypes\";\r\nimport { Mealy } from \"../../Logic/Mealy\";\r\nimport { History } from \"./History\"\r\n\r\ninterface runControlProps {\r\n    computerType: ComputerType,\r\n    elements: Elements,\r\n    treeElems: Elements,\r\n    historyEndRef: React.RefObject<HTMLDivElement>,\r\n    byEmptyStack: boolean,\r\n    changerStack: () => void,\r\n    changeStateIsCurrent: (ids: number[], isCurrent: boolean) => void\r\n    updMem: (mem: string[] | undefined, ptr: number | undefined) => void\r\n    network: any\r\n    createHistNode: (idd: number, label: string, isAdmit: boolean, isInitial: boolean, isCurrent: boolean) => void\r\n    createHistEdge: (from: number, to: number, by: any) => void\r\n    getLastHistNodeId: () => number\r\n    resetHistTree: () => void\r\n    setInit: (f: () => void) => void\r\n    setNfaToDfa: (f: () => void) => void\r\n    setMinimizeDfa: (f: () => void) => void\r\n    setMooreToMealy: (f: () => void) => void\r\n    setMealyToMoore: (f: () => void) => void\r\n    setChangerByStack: (f: () => void) => void\r\n    setRun: (f: () => void) => void\r\n    setStep: (f: () => void) => void\r\n    setReset: (f: () => void) => void\r\n    setHistory: (jsx: () => JSX.Element) => void\r\n    updateElements: (elements: Elements) => void\r\n    setComputerType: (type: null | ComputerType) => void\r\n    setResettedStatus: (status: boolean) => void\r\n    setByEmptyStack: (byEmptyStack: boolean) => void\r\n    setIsNonDetermenistic: (v: boolean) => void\r\n    setIsNonMinimizable: (v: boolean) => void\r\n    treeContextInfo: () => string\r\n    treeVisible: () => boolean\r\n}\r\n\r\ninterface runControlState {\r\n    input: string,\r\n    result?: boolean,\r\n    computer: Computer | undefined,\r\n    editMode: boolean,\r\n    currentInputIndex: number,\r\n    history: { node: node, note: string[] | undefined }[][],\r\n    byEmptyStack: boolean,\r\n    wasRuned: boolean,\r\n    memory: string[] | undefined,\r\n    gElements: graph,\r\n    startNode: node | undefined,\r\n    lastHistUnits: nodeTree[],\r\n    startStatements: NodeCore[]\r\n}\r\n\r\ntype ButtonSource = { name: () => string, onClick: () => void }\r\n\r\nconst creatButtons = (buttons: ButtonSource[][]) => {\r\n    const buttonsComp = buttons.reduce((acc: any[], buttons) => {\r\n        console.log(buttons);\r\n        acc.push(\r\n            <div className=\"run-control__item run-control__buttons\">\r\n                {\r\n                    buttons.map((button) =>\r\n                        <div className=\"run-control__button\">\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                onClick={\r\n                                    () => { button.onClick() }\r\n                                }\r\n                            >\r\n                                {button.name()}\r\n                            </Button>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n            </div>\r\n        )\r\n\r\n        return acc\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {buttonsComp}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype nodeTree = {\r\n    id: number,\r\n    idd: number,\r\n    stack?: string[],\r\n    move?: Move,\r\n    by?: string,\r\n    from?: NodeCore,\r\n    stackDown?: string,\r\n    output?: Output,\r\n    label: string,\r\n    isAdmit: boolean,\r\n    isInitial: boolean,\r\n    isCurrent: boolean\r\n}\r\n\r\nclass RunControl extends React.Component<runControlProps, runControlState> {\r\n\r\n    constructor(props: runControlProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: \"\",\r\n            result: undefined,\r\n            computer: undefined,\r\n            editMode: true,\r\n            currentInputIndex: -1,\r\n            history: [],\r\n            byEmptyStack: false,\r\n            wasRuned: false,\r\n            memory: undefined,\r\n            gElements: elementsToGraph(this.props.elements),\r\n            startNode: undefined,\r\n            lastHistUnits: [],\r\n            startStatements: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setInit(() => {\r\n            let haveEmpty = false\r\n            this.props.elements.edges.forEach(edge => {\r\n                if (edge.label === \"\") {\r\n                    haveEmpty = true\r\n                }\r\n            })\r\n            if (!haveEmpty) {\r\n                return this.initializeComputer()\r\n            }\r\n        })\r\n        this.props.setNfaToDfa(this.nfaToDfa)\r\n        this.props.setMinimizeDfa(this.minimizeDfa)\r\n        this.props.setMooreToMealy(this.mooreToMealy)\r\n        this.props.setMealyToMoore(this.mealyToMoore)\r\n        this.props.setChangerByStack(this.admitByStack)\r\n        this.props.setRun(this.run)\r\n        this.props.setStep(this.step)\r\n        this.props.setReset(this.reset)\r\n        this.props.setHistory(() =>\r\n            <History\r\n                startNode={this.state.startNode!}\r\n                history={this.state.history!}\r\n                historyEndRef={this.props.historyEndRef}\r\n            />)\r\n        this.initializeComputer()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<runControlProps>, prevState: Readonly<runControlState>, snapshot?: any) {\r\n        if (this.computerShouldBeUpdated(elementsToGraph(prevProps.elements), elementsToGraph(this.props.elements))) {\r\n            this.initializeComputer();\r\n        }\r\n\r\n    }\r\n\r\n    computerShouldBeUpdated = (prev: graph, current: graph): boolean => {\r\n        const compareNodes = (): boolean => {\r\n            if (prev.nodes.length !== current.nodes.length) {\r\n                return true;\r\n            }\r\n\r\n            return prev.nodes.some((prev, index) => {\r\n                const curr = current.nodes[index];\r\n                return prev.id !== curr.id ||\r\n                    prev.isAdmit !== curr.isAdmit ||\r\n                    prev.isInitial !== curr.isInitial;\r\n            })\r\n        }\r\n\r\n        const compareEdges = (): boolean => {\r\n            if (prev.edges.length !== current.edges.length) {\r\n                return true;\r\n            }\r\n\r\n            return prev.edges.some((prev, index) => {\r\n                const curr = current.edges[index];\r\n                return prev.id !== curr.id ||\r\n                    prev.from !== curr.from ||\r\n                    prev.to !== curr.to ||\r\n                    !isEqual(curr.transitions, prev.transitions)\r\n            });\r\n        }\r\n        return compareEdges() || compareNodes()\r\n    }\r\n\r\n    getComputer = (computerType: ComputerType, graph: graph, initialNode: node[], input: string[]): Computer | undefined => {\r\n        switch (computerType) {\r\n            case \"mealy\":\r\n                return new Mealy(graph, initialNode, input)\r\n        }\r\n\r\n    }\r\n\r\n    initializeComputer = () => {\r\n        console.warn(\"Reinitializing computer\");\r\n\r\n        this.setState({ gElements: elementsToGraph(this.props.elements) }, () => {\r\n            this.props.resetHistTree()\r\n\r\n            const initialNode: node[] = elementsToGraph(this.props.elements).nodes.filter(node => node.isInitial);\r\n            const input = this.state.input.split(\"\");\r\n\r\n            if (initialNode === undefined) {\r\n                console.warn(\"There is no initial node. Computer will not be initialized\");\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                computer: this.getComputer(this.props.computerType, this.state.gElements, initialNode, input),\r\n                result: undefined\r\n            }, async () => {\r\n\r\n                const tmp: nodeTree[] = []\r\n\r\n                const startStmts = this.state.computer !== undefined\r\n                    ? this.state.computer.getStartStatements()\r\n                    : []\r\n\r\n                startStmts.forEach((v, index) => {\r\n                    const paddingTreeId = index + 1\r\n\r\n                    tmp.push({\r\n                        stack: v.stack ? [...v.stack] : [],\r\n                        from: v.from!,\r\n                        by: v.by,\r\n                        stackDown: v.stackDown,\r\n                        label: `${v.id}`,\r\n                        isAdmit: v.isAdmit,\r\n                        isInitial: true,\r\n                        isCurrent: false,\r\n                        id: this.props.getLastHistNodeId() + paddingTreeId,\r\n                        idd: v.id\r\n                    })\r\n                })\r\n\r\n                if (this.props.computerType === 'pda' || this.props.computerType === 'dpda') {\r\n                    tmp.forEach((v) => {\r\n                        const gNode = this.state.gElements.nodes.find((gEl) => gEl.id === v.idd)\r\n                        const label = gNode?.label + '\\n―' + (v.stack!.reduce((acc, stack) => '\\n' + stack + acc, ''))\r\n                        // + '\\n' + `${(this.props.getLastHistNodeId() + 1)}` + \r\n                        this.props.createHistNode(v.idd, label, v.isAdmit, v.isInitial, v.isCurrent)\r\n                    })\r\n                } else {\r\n                    tmp.forEach((v) => {\r\n                        const gNode = this.state.gElements.nodes.find((gEl) => gEl.id === v.idd)\r\n                        this.props.createHistNode(v.idd, gNode!.label, v.isAdmit, v.isInitial, v.isCurrent)\r\n                    })\r\n                }\r\n                await this.setState({ lastHistUnits: tmp })\r\n            });\r\n\r\n        })\r\n\r\n    }\r\n\r\n    onInputChanged = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        const input = event.target.value;\r\n\r\n        this.reset();\r\n        this.state.computer?.setInput(input.split(\"\"));\r\n\r\n        this.setState({ input: input });\r\n    }\r\n\r\n\r\n\r\n    drawTreeLayot = (nodes: NodeCore[], pred: nodeTree[], tmp: nodeTree[]) => {\r\n        nodes.forEach((v, index) => {\r\n            const paddingTreeId = index + 1\r\n            const gNode = this.state.gElements.nodes.find((gEl) => gEl.id === v.id)\r\n\r\n            tmp.push({\r\n                stack: v.stack ? [...v.stack] : [],\r\n                from: v.from!,\r\n                by: v.by,\r\n                stackDown: v.stackDown,\r\n                move: v.move,\r\n                output: v.output,\r\n                label: `${v.id}`,\r\n                isAdmit: v.isAdmit,\r\n                isInitial: gNode!.isInitial,\r\n                isCurrent: gNode!.isCurrent,\r\n                id: this.props.getLastHistNodeId() + paddingTreeId,\r\n                idd: v.id\r\n            })\r\n        })\r\n\r\n        if (this.props.computerType === 'pda' || this.props.computerType === 'dpda') {\r\n            tmp.forEach((v) => {\r\n                const gNode = this.state.gElements.nodes.find((gEl) => gEl.id === v.idd)\r\n                const label = gNode?.label + '\\n' + '―' + (v.stack!.reduce((acc, stack) => '\\n' + stack + acc, ''))\r\n                this.props.createHistNode(v.idd, label, v.isAdmit, v.isInitial, v.isCurrent)\r\n            })\r\n        } else {\r\n            tmp.forEach((v) => {\r\n                const gNode = this.state.gElements.nodes.find((gEl) => gEl.id === v.idd)\r\n                this.props.createHistNode(v.idd, gNode!.label, v.isAdmit, v.isInitial, v.isCurrent)\r\n            })\r\n        }\r\n\r\n\r\n        const letter = (l: any) => l === EPS ? 'ε' : l\r\n\r\n        const stackDwn = (stDwn: any) => this.props.computerType === 'pda' || this.props.computerType === 'dpda'\r\n            ? ', ' + letter(stDwn)\r\n            : ''\r\n\r\n        const move = (mv: Move | undefined) => this.props.computerType === 'tm'\r\n            ? mv === Move.L ? ', L' : \", R\"\r\n            : ''\r\n\r\n        const output = (out: any) => this.props.computerType === 'mealy' || this.props.computerType === 'dmealy'\r\n            ? ', ' + out\r\n            : ''\r\n\r\n        const txt = (l: any, stDwn: any, mv: any, out: any) => letter(l) + stackDwn(stDwn) + move(mv) + output(out)\r\n\r\n        const bySymbRules = tmp.reduce((acc: { from: number, to: number[], by: any }[], v) => {\r\n            const from = () => {\r\n                switch (this.props.computerType) {\r\n                    case 'tm':\r\n                    case 'moore':\r\n                    case 'dmoore':\r\n                    case 'mealy':\r\n                    case 'dmealy':\r\n                        return pred.filter((p) => v.from && p.idd === v.from?.id)[0].id;\r\n                    default:\r\n                        return pred.filter((p) => v.from && p.idd === v.from?.id && p.stack?.toString === v.from.stack?.toString)[0].id\r\n                }\r\n            }\r\n            acc.push({ from: from(), to: [v.id], by: txt(v.by, v.stackDown, v.move, v.output) })\r\n            return acc\r\n        }, [])\r\n\r\n        console.log('\\n\\n\\n')\r\n\r\n        bySymbRules.forEach((rule) => rule.to.forEach((to) => this.props.createHistEdge(rule.from, to, rule.by)))\r\n\r\n        this.setState({ lastHistUnits: tmp })\r\n\r\n    }\r\n\r\n    treeEps = (byEpsPred: NodeCore[], byLetter: NodeCore[], byEpsAfter: NodeCore[]) => {\r\n        console.log('\\n')\r\n        console.log('EPS>>>', byEpsPred)\r\n        console.log('LTR>>>', byLetter)\r\n        console.log('EPS>>>', byEpsAfter)\r\n        console.log('\\n')\r\n\r\n        const tmp: nodeTree[] = []\r\n        this.drawTreeLayot(byEpsPred, this.state.lastHistUnits, tmp)\r\n        const tmp1: nodeTree[] = []\r\n        this.drawTreeLayot(byLetter, tmp, tmp1)\r\n        const tmp2: nodeTree[] = []\r\n        this.drawTreeLayot(byEpsAfter, tmp1, tmp2)\r\n    }\r\n\r\n    tree = (byLetter: NodeCore[]) => {\r\n        const tmp: nodeTree[] = []\r\n        this.drawTreeLayot(byLetter, this.state.lastHistUnits, tmp)\r\n    }\r\n\r\n    step = async () => {\r\n        if (this.state.computer === undefined) {\r\n            console.error(\"Computer is not initialized yet\");\r\n            return;\r\n        }\r\n\r\n        this.props.setResettedStatus(true)\r\n\r\n\r\n        if (this.state.wasRuned) {\r\n            this.setState({ wasRuned: false });\r\n            this.reset();\r\n            await this.props.resetHistTree()\r\n        }\r\n\r\n        if (this.state.currentInputIndex === this.state.input.length - 1 && this.props.computerType !== \"tm\") return;\r\n        if (this.state.result !== undefined && this.state.currentInputIndex !== -1 && this.props.computerType !== \"tm\") return;\r\n\r\n        try {\r\n            const stepResult: Step = this.state.computer.step()\r\n\r\n            if (stepResult.nodes.length === 0) return;\r\n\r\n            this.props.changeStateIsCurrent(stepResult.nodes.map(node => node.id), true);\r\n            this.props.updMem(stepResult.memory, stepResult.pointer)\r\n\r\n            let result = undefined;\r\n            if (stepResult.counter === this.state.input.length) {\r\n                result = stepResult.isAdmit\r\n            } else if (this.state.currentInputIndex + 2 !== stepResult.counter) {\r\n                result = false;\r\n            }\r\n\r\n            const nodes = stepResult.nodes\r\n                .map(nodeCore => this.state.gElements.nodes.find(node => node.id === nodeCore.id))\r\n                .filter((node): node is node => node !== undefined);\r\n\r\n            const byEpsPred = stepResult.byEpsPred ? stepResult.byEpsPred : []\r\n\r\n            const byLetter = stepResult.byLetter ? stepResult.byLetter : []\r\n\r\n            const byEpsAfter = stepResult.byEpsAfter ? stepResult.byEpsAfter : []\r\n\r\n            if (this.props.computerType !== 'tm' && this.state.computer.haveEpsilon()) {\r\n                console.log('byEpsAfter>>>', byEpsAfter)\r\n                this.treeEps(byEpsPred, byLetter, byEpsAfter)\r\n            } else {\r\n                console.log('byLetter', byLetter)\r\n                const tmp: nodeTree[] = []\r\n                this.drawTreeLayot(byLetter, this.state.lastHistUnits, tmp)\r\n            }\r\n\r\n            const _nodes = nodes.map((e, i) => {\r\n                const stack = stepResult.nodes[i].stack\r\n                return {\r\n                    node: e,\r\n                    note: stack !== undefined\r\n                        ? stack.reverse()\r\n                        : stepResult.output !== undefined\r\n                            ? stepResult.output!\r\n                            : undefined\r\n                }\r\n            })\r\n\r\n            this.setState({\r\n                result: result,\r\n                currentInputIndex: this.state.currentInputIndex + 1,\r\n                history: [...this.state.history, _nodes],\r\n                memory: stepResult.memory,\r\n            }, () => {\r\n                this.props.setHistory(() =>\r\n                    <History\r\n                        startNode={this.state.startNode!}\r\n                        history={this.state.history!}\r\n                        historyEndRef={this.props.historyEndRef}\r\n                    />)\r\n            });\r\n\r\n        } catch (e) {\r\n            if (false) {\r\n                this.props.setIsNonDetermenistic(true)\r\n                console.log('NonDeterministic')\r\n            }\r\n            else {\r\n                console.log(e)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    reset = (): void => {\r\n        this.state.computer?.restart();\r\n        this.props.changeStateIsCurrent([], true);\r\n        this.setState({\r\n            result: undefined,\r\n            currentInputIndex: -1,\r\n            history: [],\r\n        },\r\n            () => {\r\n                this.initializeComputer()\r\n                this.props.setHistory(() =>\r\n                    <History\r\n                        startNode={this.state.startNode!}\r\n                        history={this.state.history!}\r\n                        historyEndRef={this.props.historyEndRef}\r\n                    />)\r\n            }\r\n        );\r\n        this.state.computer?.setInput(this.state.input.split(\"\"))\r\n        this.props.setResettedStatus(false)\r\n        this.props.resetHistTree()\r\n    }\r\n\r\n    run = async (): Promise<void> => {\r\n        if (this.state.computer === undefined) {\r\n            console.error(\"Computer is not initialized yet\");\r\n            return;\r\n        }\r\n\r\n        await this.reset();\r\n\r\n        try {\r\n            const result = this.state.computer.run();\r\n\r\n            const histTrace = result.histTrace ? result.histTrace : []\r\n\r\n            histTrace.forEach(async (histStep) => {\r\n                const byEpsPred = histStep.byEpsPred ? histStep.byEpsPred : []\r\n\r\n                const byLetter = histStep.byLetter ? histStep.byLetter : []\r\n\r\n                const byEpsAfter = histStep.byEpsAfter ? histStep.byEpsAfter : []\r\n\r\n                if (this.state.computer && this.state.computer.haveEpsilon()) {\r\n                    this.treeEps(byEpsPred, byLetter, byEpsAfter)\r\n                } else {\r\n                    this.tree(byLetter)\r\n                }\r\n            })\r\n\r\n            this.setState({ result: result.isAdmit, currentInputIndex: -1, history: [] });\r\n            this.setState({ wasRuned: true })\r\n        } catch (e) {\r\n            if (false) {\r\n                this.props.setIsNonDetermenistic(true)\r\n                console.log('NonDeterministic')\r\n            }\r\n        }\r\n    }\r\n\r\n    nfaToDfa = (): void => {\r\n        const nfaToDfa = this.state.computer!.nfaToDfa()\r\n        const nodes = nfaToDfa.nodes.map((v, it) => ({\r\n            id: v.id,\r\n            isAdmit: v.isAdmit,\r\n            label: v.id.toString(),\r\n            isInitial: it === 0,\r\n            isCurrent: false\r\n        }))\r\n        const edges = nfaToDfa.edges\r\n        const gElements = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        }\r\n\r\n        this.setState({\r\n            gElements: gElements\r\n        }, () => {\r\n            this.props.updateElements(graphToElements(gElements))\r\n            this.props.setComputerType(\"dfa\")\r\n        })\r\n    }\r\n\r\n    admitByStack = (): void => {\r\n        const curStbyEmp = this.state.byEmptyStack;\r\n        this.setState({ byEmptyStack: !curStbyEmp });\r\n        this.props.setByEmptyStack(!curStbyEmp)\r\n        this.state.computer!.byEmptyStackAdmt(!curStbyEmp)\r\n        this.reset();\r\n    }\r\n\r\n    minimizeDfa = (): void => {\r\n        this.initializeComputer();\r\n        this.reset();\r\n\r\n        try {\r\n            const miniDFA: GraphEval = this.state.computer!.minimizeDfa()\r\n            const nodes = miniDFA.graphcore.nodes.map((v) => ({\r\n                id: v.id,\r\n                isAdmit: v.isAdmit,\r\n                label: 'G' + v.id.toString(),\r\n                isInitial: v.id === miniDFA.start.id,\r\n                isCurrent: false\r\n            }))\r\n            const edges = miniDFA.graphcore.edges\r\n            const gElements = {\r\n                nodes: nodes,\r\n                edges: edges\r\n            }\r\n\r\n            this.setState({\r\n                gElements: gElements\r\n            }, () => {\r\n                this.props.updateElements(graphToElements(gElements))\r\n            })\r\n        } catch (e) {\r\n            this.props.setIsNonMinimizable(true)\r\n            console.log('NonDeterministic')\r\n        }\r\n    }\r\n\r\n    mooreToMealy = (): void => {\r\n        this.initializeComputer();\r\n        this.reset();\r\n\r\n        const mealy: GraphEvalMultiStart = this.state.computer!.mooreToMealy()\r\n\r\n        const starts = mealy.start.map((v) => v.id)\r\n\r\n        const nodes = mealy.graphcore.nodes.map((v) => ({\r\n            id: v.id,\r\n            isAdmit: v.isAdmit,\r\n            label: 'S' + v.id.toString(),\r\n            isInitial: starts.includes(v.id),\r\n            isCurrent: false,\r\n        }))\r\n        const edges = mealy.graphcore.edges\r\n        const gElements = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        }\r\n        this.setState({\r\n            gElements: gElements\r\n        }, () => {\r\n            this.props.updateElements(graphToElements(gElements))\r\n            this.props.setComputerType(\"mealy\")\r\n        })\r\n    }\r\n\r\n    mealyToMoore = (): void => {\r\n        this.initializeComputer();\r\n        this.reset();\r\n\r\n        const miniDFA: GraphEvalMultiStart = this.state.computer!.mealyToMoore()\r\n\r\n        const starts = miniDFA.start.map(v => v.id)\r\n\r\n        const nodes = miniDFA.graphcore.nodes.map((v) => ({\r\n            id: v.id,\r\n            isAdmit: v.isAdmit,\r\n            label: 'S' + v.id.toString() + ' | ' + v.output,\r\n            isInitial: starts.includes(v.id),\r\n            isCurrent: false,\r\n        }))\r\n        const edges = miniDFA.graphcore.edges\r\n        const gElements = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        }\r\n        this.setState({\r\n            gElements: gElements\r\n        }, () => {\r\n            this.props.updateElements(graphToElements(gElements))\r\n            this.props.setComputerType(\"moore\")\r\n        })\r\n    }\r\n\r\n    private defaultButtonsLine: ButtonSource[] = [\r\n        { name: () => 'Шаг', onClick: () => this.step() },\r\n        { name: () => 'Запуск', onClick: () => this.run() },\r\n        { name: () => 'Сбросить', onClick: () => this.reset() },\r\n    ]\r\n\r\n\r\n    private buttonsTree: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        [{ name: this.props.treeContextInfo, onClick: this.props.treeVisible }]\r\n    ]\r\n\r\n    private buttonNfa: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        [{ name: this.props.treeContextInfo, onClick: this.props.treeVisible }],\r\n        [{ name: () => 'ДКА', onClick: () => this.nfaToDfa() }],\r\n    ]\r\n\r\n\r\n    private buttonDfa: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        [{ name: this.props.treeContextInfo, onClick: this.props.treeVisible }],\r\n        [{ name: () => 'Минимизировать', onClick: () => this.minimizeDfa() }],\r\n    ]\r\n\r\n\r\n    private buttonMealy: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        // [{ name: () => 'Мур', onClick: () => this.mealyToMoore() }],\r\n    ]\r\n\r\n    private buttonMoore: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        [{ name: this.props.treeContextInfo, onClick: this.props.treeVisible }],\r\n        [{ name: () => 'Мили', onClick: () => this.mooreToMealy() }],\r\n    ]\r\n\r\n    private buttonsByStackByState: ButtonSource[][] = [\r\n        this.defaultButtonsLine,\r\n        [\r\n            { name: () => this.props.byEmptyStack ? \"По стеку\" : \"По состоянию\", onClick: () => this.props.changerStack() },\r\n            { name: this.props.treeContextInfo, onClick: this.props.treeVisible }\r\n        ],\r\n    ]\r\n\r\n    private buttonsNoRun: ButtonSource[][] = [\r\n        [\r\n            { name: () => 'Шаг', onClick: () => this.step() },\r\n            { name: () => 'Сбросить', onClick: () => this.reset() }\r\n        ],\r\n        [{ name: this.props.treeContextInfo, onClick: this.props.treeVisible }]\r\n    ]\r\n\r\n    private getButtons = () => {\r\n        switch (this.props.computerType) {\r\n            case \"mealy\":\r\n            case \"dmealy\":\r\n                return creatButtons(this.buttonMealy)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ControlWrapper title={\"Запуск\"}>\r\n                <div>\r\n\r\n                    <div className=\"run-control__item run-control__input__row\">\r\n                        {\r\n                            this.state.editMode\r\n                                ?\r\n                                <TextField\r\n                                    label=\"Входная строка\"\r\n                                    size=\"small\"\r\n                                    value={this.state.input}\r\n                                    onChange={this.onInputChanged}\r\n                                    onBlur={() => {\r\n                                        this.state.input.length && this.setState({ editMode: false }, () => this.initializeComputer())\r\n                                    }}\r\n                                />\r\n                                :\r\n                                <div\r\n                                    className=\"run-control__input-value\"\r\n                                    onClick={() => {\r\n                                        this.setState({ editMode: true });\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        Array.from(this.state.input).map((char, index) => (\r\n                                            <span\r\n                                                className={\"run-control__input__span\" + (this.state.currentInputIndex === index ? \"--current\" : \"\")}\r\n                                                key={index}\r\n                                            >\r\n                                                {char}\r\n                                            </span>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n                        }\r\n\r\n                        <div className=\"run-control__result\">\r\n                            {\r\n                                this.state.result === undefined ? null :\r\n                                    this.state.result\r\n                                        ? <DoneIcon style={{ color: \"var(--commerce)\" }} />\r\n                                        : <CloseIcon style={{ color: \"var(--destructive)\" }} />\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                    {this.getButtons()}\r\n\r\n\r\n                </div>\r\n            </ControlWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withComputerType(RunControl);","import React, { ReactNode } from 'react';\r\nimport \"./App.css\"\r\nimport {\r\n    ComputerType,\r\n    edge,\r\n    graph,\r\n    histNode,\r\n    node\r\n} from \"./react-graph-vis-types\";\r\nimport NodeControl from \"./Components/NodeControl/NodeControl\";\r\nimport EdgeControl from \"./Components/EdgeControl/EdgeControl\";\r\nimport {\r\n    computersInfo, decorateGraph, elementsToGraph,\r\n    graphToElements, transitionsToLabel\r\n} from \"./utils\";\r\nimport WelcomePopout from \"./Components/WelcomePopout/WelcomePopout\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport SavingPopout from \"./Components/SavingPopout/SavingPopout\";\r\nimport { Route, Routes, HashRouter } from \"react-router-dom\";\r\nimport RegisterPage from \"./Components/Pages/RegisterPage/RegisterPage\";\r\nimport AppHeader from \"./Components/AppHeader/AppHeader\";\r\nimport { TransitionParams } from \"./Logic/IGraphTypes\";\r\nimport RegisteredPage from \"./Components/Pages/RegisteredPage/RegisteredPage\";\r\nimport { VisNetwork } from './VisNetwork';\r\nimport {\r\n    DataSet,\r\n    Network,\r\n} from \"vis-network/standalone/esm/vis-network\";\r\nimport { NonDetermenisticModal, NonMinimizableModal } from './ErrorModal';\r\nimport { UserModel } from \"./Models/UserModel\";\r\nimport UserPage from './Components/Pages/UserPage/UserPage';\r\nimport { computerAction, controlAction } from './action';\r\nimport { Ribbon } from './Ribbon';\r\nimport RunControl from './Components/RunControl/RunControl';\r\n\r\ninterface appProps {\r\n}\r\n\r\nexport type Elements = {\r\n    nodes: DataSet<node, \"id\">,\r\n    edges: DataSet<edge, \"id\">\r\n}\r\n\r\nexport type HistElements = {\r\n    nodes: DataSet<histNode, \"id\">,\r\n    edges: DataSet<edge, \"id\">\r\n}\r\n\r\ninterface appState {\r\n    computerType: null | ComputerType,\r\n    selectedNode: node | null,\r\n    selectedEdge: edge | null,\r\n    inEdgeMode: boolean,\r\n    elements: Elements,\r\n    treeElems: HistElements,\r\n    options: any,\r\n    initiallyStabilized: boolean,\r\n    popout: ReactNode | null,\r\n    savePopoutOpen: boolean,\r\n    welcomePopoutOpen: boolean,\r\n    isLogin: boolean,\r\n    mem: string[] | undefined,\r\n    ptr: number | undefined,\r\n    wasComputerResetted: boolean,\r\n    byEmptyStack: boolean,\r\n    errIsNonDetermenistic: boolean,\r\n    errIsNonMinimizable: boolean,\r\n    showTree: boolean,\r\n    History: (() => JSX.Element),\r\n    user: UserModel | null,\r\n}\r\n\r\nexport const ComputerTypeContext = React.createContext<null | ComputerType>(null);\r\n\r\nclass App extends React.Component<appProps, appState> {\r\n\r\n    memRef = React.createRef<HTMLDivElement>();\r\n    network = React.createRef<Network | null>();\r\n    networkTST = React.createRef<Network | null>();\r\n\r\n    constructor(props: appProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            computerType: null,\r\n\r\n            selectedNode: null,\r\n            selectedEdge: null,\r\n            inEdgeMode: false,\r\n            elements: { nodes: new DataSet<node>(), edges: new DataSet<edge>() },\r\n            treeElems: { nodes: new DataSet<histNode>(), edges: new DataSet<edge>() },\r\n            options: {\r\n                edges: {\r\n                    smooth: {\r\n                        enabled: true,\r\n                        type: \"discrete\",\r\n                        roundness: 0.5\r\n                    },\r\n                    length: 200\r\n                },\r\n                nodes: {\r\n                    shape: \"box\",\r\n                    font: \"18px Roboto black\",\r\n                    labelHighlightBold: false,\r\n                    widthConstraint: 40,\r\n                    color: \"red\",\r\n                    heightConstraint: 40\r\n                },\r\n                physics: {\r\n                    enabled: false\r\n                }\r\n            },\r\n            initiallyStabilized: false,\r\n            popout: null,\r\n            savePopoutOpen: false,\r\n            welcomePopoutOpen: true,\r\n            isLogin: true,\r\n            mem: undefined,\r\n            ptr: undefined,\r\n            wasComputerResetted: false,\r\n            byEmptyStack: false,\r\n\r\n            errIsNonDetermenistic: false,\r\n            errIsNonMinimizable: false,\r\n\r\n            showTree: false,\r\n            History: () => (<div></div>),\r\n            user: null\r\n        };\r\n    }\r\n\r\n    setIsNonDetermenistic = (v: boolean) => this.setState({ errIsNonDetermenistic: v })\r\n    setIsNonMinimizable = (v: boolean) => this.setState({ errIsNonMinimizable: v })\r\n\r\n    async componentDidMount() {\r\n        // await this.updateCurrentUser();\r\n\r\n        // this.updateGraph();\r\n        // this.subscribeToShortcuts();\r\n        // this.openWelcomePopout();\r\n    }\r\n\r\n    lastNodeId = 0;\r\n\r\n    subscribeToShortcuts = () => {\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            if (event.key === \"s\" && event.ctrlKey) {\r\n                event.preventDefault();\r\n                this.openSavePopout();\r\n            }\r\n        })\r\n    }\r\n\r\n    openSavePopout = () => {\r\n        this.setState({ savePopoutOpen: true });\r\n    }\r\n\r\n    closeSavePopout = () => {\r\n        this.setState({ savePopoutOpen: false });\r\n    }\r\n\r\n    openWelcomePopout = () => {\r\n        this.setState({ welcomePopoutOpen: true });\r\n    }\r\n\r\n    closeWelcomePopout = () => {\r\n        this.setState({ welcomePopoutOpen: false });\r\n    }\r\n\r\n\r\n    setUser = (user: UserModel) => {\r\n        this.setState({ user: user })\r\n    }\r\n\r\n\r\n    updateGraph = (): void => {\r\n        decorateGraph(this.state.elements, this.state.computerType)\r\n    }\r\n\r\n    changeNodeLabel = (id: number, label: string): void => {\r\n        this.state.elements.nodes.forEach((node) => {\r\n            if (node.id === id) {\r\n                const lableTokens =\r\n                    label\r\n                        .split('')\r\n                        .filter(x => x !== \" \" && x !== \"\\n\")\r\n                        .join('')\r\n                        .split('|')\r\n                const output = lableTokens[1] !== undefined ? lableTokens[1] : \"\"\r\n                this.state.elements.nodes.update({\r\n                    id: node.id,\r\n                    label: label,\r\n                    output: output\r\n                })\r\n            }\r\n        })\r\n        this.updateGraph()\r\n    }\r\n\r\n\r\n    changeStateIsAdmit = (id: number, isAdmit: boolean): void => {\r\n        this.state.elements.nodes.forEach((node) => {\r\n            if (node.id === id) {\r\n                this.state.elements.nodes.update({\r\n                    id: node.id,\r\n                    isAdmit: isAdmit\r\n                })\r\n            }\r\n        })\r\n        this.updateGraph()\r\n    }\r\n\r\n    changeStateIsInitial = (id: number, isInitial: boolean): void => {\r\n        this.state.elements.nodes.forEach((node) => {\r\n            if (node.id === id) {\r\n                this.state.elements.nodes.update({\r\n                    id: node.id,\r\n                    isInitial: isInitial\r\n                })\r\n            }\r\n        })\r\n        this.updateGraph()\r\n    }\r\n\r\n\r\n    changeStateIsCurrent = (ids: number[], isCurrent: boolean): void => {\r\n        this.state.elements.nodes.forEach((node) => {\r\n            if (node.isCurrent) {\r\n                this.state.elements.nodes.update({\r\n                    id: node.id,\r\n                    isCurrent: false\r\n                })\r\n            }\r\n        })\r\n        this.state.elements.nodes.forEach((node) => {\r\n            if (ids.includes(node.id)) {\r\n                this.state.elements.nodes.update({\r\n                    id: node.id,\r\n                    isCurrent: isCurrent\r\n                })\r\n            }\r\n        })\r\n        this.updateGraph()\r\n    }\r\n\r\n    createNode = (e: { pointer: { canvas: { x: any; y: any; }; }; }) => {\r\n        this.lastNodeId++;\r\n        const node = {\r\n            id: this.lastNodeId,\r\n            label: 'S' + (this.lastNodeId),\r\n            x: e.pointer.canvas.x,\r\n            y: e.pointer.canvas.y,\r\n            isAdmit: false,\r\n            isInitial: false,\r\n            isCurrent: false,\r\n        }\r\n        this.state.elements.nodes.add(node);\r\n    }\r\n\r\n    lastHistNodeId = 0\r\n\r\n    createHistNode = (idd: number, label: string, isAdmit: boolean, isInitial: boolean, isCurrent: boolean) => {\r\n        this.lastHistNodeId++;\r\n\r\n\r\n        const border = isInitial ? \"#0041d0\" : isAdmit ? \"#ff0072\" : \"#000000\"\r\n        const background = isCurrent ? \"#ffff55\" : \"#ffffff\";\r\n        const borderWidth = {\r\n            default: 1.5,\r\n            primary: 2,\r\n            highlight: 4\r\n        };\r\n\r\n        const node: histNode = {\r\n            id: this.lastHistNodeId,\r\n            idd,\r\n            label,\r\n            isAdmit,\r\n            isInitial,\r\n            isCurrent,\r\n            color: {\r\n                background: background,\r\n                border: border,\r\n                highlight: {\r\n                    border: border,\r\n                    background: background\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state.treeElems.nodes.add(node);\r\n    }\r\n\r\n    createHistEdge = (from: number, to: number, by: any) => {\r\n        const transitions = new Set([[{ title: by }]])\r\n\r\n        this.state.treeElems.edges.add({\r\n            from: from,\r\n            to: to,\r\n            transitions: transitions,\r\n            label: by\r\n        })\r\n    }\r\n\r\n    historyEndRef = React.createRef<HTMLDivElement>();\r\n\r\n    getLastHistNodeId = () => this.lastHistNodeId\r\n\r\n    resetHistTree = () => {\r\n        for (let i = 0; i <= this.lastHistNodeId; i++) {\r\n            this.state.treeElems.nodes.remove(i)\r\n        }\r\n        this.state.treeElems.edges.forEach((e) => this.state.treeElems.edges.remove(e.id!))\r\n        this.lastHistNodeId = 0;\r\n    }\r\n\r\n    selectNode = (e: { nodes: number[]; }): void => {\r\n        const nodesIDs: number[] = e.nodes;\r\n        const selectedNodes = this.state.elements.nodes.get(nodesIDs);\r\n        this.setState({ selectedNode: selectedNodes[0] });\r\n    }\r\n\r\n\r\n    deselectNode = (e: { nodes: number[]; }): void => {\r\n        const nodesIDs: number[] = e.nodes;\r\n        if (nodesIDs.length === 0) {\r\n            this.setState({ selectedNode: null });\r\n        }\r\n    }\r\n\r\n    deleteNode = (id: number): void => {\r\n        this.state.elements.nodes.remove(id)\r\n\r\n        let rmEdges: string[] = []\r\n        this.state.elements.edges.forEach((edge) => {\r\n            if (edge.from === id || edge.to === id) {\r\n                rmEdges.push(edge.id!)\r\n            }\r\n        })\r\n        this.state.elements.edges.remove(rmEdges)\r\n    }\r\n\r\n    selectEdge = (e: { edges: any; }): void => {\r\n        const edgesIDs: number[] = e.edges;\r\n        const selectedEdges = this.state.elements.edges.get(edgesIDs);\r\n        this.setState({ selectedEdge: selectedEdges[0] });\r\n        console.log('click1  = selectEdge')\r\n    }\r\n\r\n    deselectEdge = (e: { edges: number[]; }): void => {\r\n        const edgesIDs: number[] = e.edges;\r\n        if (edgesIDs.length === 0) {\r\n            this.setState({ selectedEdge: null });\r\n        }\r\n    }\r\n\r\n    changeEdgeTransition = (id: string, transitions: Set<TransitionParams[]>): void => {\r\n        this.state.elements.edges.update({\r\n            id: id,\r\n            label: transitionsToLabel(transitions, this.state.computerType),\r\n            transitions: transitions\r\n        })\r\n    }\r\n\r\n    deleteEdge = (id: string): void => {\r\n        this.state.elements.edges.remove(id)\r\n    }\r\n\r\n    updMem = (mem: string[], ptr: number): void => {\r\n        this.setState({ mem: mem, ptr: ptr });\r\n    }\r\n\r\n    treeVisible = () => {\r\n        this.setState({ showTree: !this.state.showTree })\r\n        return !this.state.showTree\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Routes>\r\n                    <Route path=\"/register\" element={\r\n                        <RegisterPage />\r\n                    } />\r\n                    <Route path=\"/registered\" element={\r\n                        <RegisteredPage />\r\n                    } />\r\n                    <Route path=\"/user/:userId\" element={\r\n                        <UserPage\r\n                            changeComputerType={\r\n                                (computerType, graph: graph | null) => {\r\n                                    const defaultGraph = graph || computersInfo[computerType!].defaultGraph;\r\n                                    graphToElements(defaultGraph).nodes.forEach((v) => console.log(v))\r\n\r\n                                    this.lastNodeId = defaultGraph.nodes.length;\r\n                                    this.setState({\r\n                                        computerType: computerType,\r\n                                        elements: graphToElements(defaultGraph)\r\n                                    }\r\n                                        , () => this.updateGraph()\r\n                                    );\r\n                                }\r\n                            }\r\n                        />\r\n                    } />\r\n                    <Route path=\"/\" element={\r\n                        <ComputerTypeContext.Provider value={this.state.computerType}>\r\n                            <div className=\"app\">\r\n                                <WelcomePopout\r\n                                    open={this.state.welcomePopoutOpen}\r\n                                    onClose={this.closeWelcomePopout}\r\n                                    changeComputerType={(computerType, graph: graph | null) => {\r\n\r\n                                        const defaultGraph = graph || computersInfo[computerType!].defaultGraph;\r\n\r\n                                        console.log(defaultGraph);\r\n                                        console.log(defaultGraph[\"nodes\"]);\r\n                                        graphToElements(defaultGraph).nodes.forEach((v) => console.log(v))\r\n\r\n                                        this.lastNodeId = defaultGraph.nodes.length;\r\n                                        this.setState({\r\n                                            computerType: computerType,\r\n                                            elements: graphToElements(defaultGraph)\r\n                                        }\r\n                                            , () => this.updateGraph()\r\n                                        );\r\n                                    }}\r\n                                />\r\n\r\n                                {this.state.popout}\r\n\r\n                                <SavingPopout open={this.state.savePopoutOpen}\r\n                                    onClose={this.closeSavePopout}\r\n                                    isLogin={this.state.isLogin}\r\n                                    graph={elementsToGraph(this.state.elements)}\r\n                                    computerType={this.state.computerType!}\r\n                                />\r\n                                <div className=\"hint-container\">\r\n                                    <Paper className=\"hint\" variant=\"outlined\">\r\n                                        Удерживайте Ctrl чтобы создать ребро\r\n                                    </Paper>\r\n                                    <Paper className=\"hint\" variant=\"outlined\">\r\n                                        Двойное нажатие чтобы создать вершину\r\n                                    </Paper>\r\n                                </div>\r\n                                <NonDetermenisticModal\r\n                                    isNonDetermenistic={this.state.errIsNonDetermenistic}\r\n                                    setIsNonDetermenistic={this.setIsNonDetermenistic}\r\n                                />\r\n                                <NonMinimizableModal\r\n                                    isNonMinimizable={this.state.errIsNonMinimizable}\r\n                                    setIsNonMinimizable={this.setIsNonMinimizable}\r\n                                />\r\n                                <Ribbon\r\n                                    computerType={this.state.computerType}\r\n                                    wasComputerResetted={this.state.wasComputerResetted}\r\n                                    mem={this.state.mem}\r\n                                    ptr={this.state.ptr}\r\n                                    memRef={this.memRef}\r\n                                />\r\n\r\n                                <AppHeader\r\n                                    onMenuButtonClicked={this.openWelcomePopout}\r\n                                    onSaveButtonClicked={this.openSavePopout}\r\n                                    isLogin={this.state.isLogin}\r\n                                />\r\n\r\n\r\n                                <div className=\"field__container\">\r\n                                    <VisNetwork\r\n                                        nodes={this.state.elements.nodes}\r\n                                        edges={this.state.elements.edges}\r\n                                        data={this.state.elements}\r\n                                        onDoubleClick={this.createNode}\r\n                                        onClick1={this.selectEdge}\r\n                                        onClick2={this.selectNode}\r\n                                        onClick3={this.deselectNode}\r\n                                        onClick4={this.deselectEdge}\r\n                                        network={this.network}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"app__right-menu\">\r\n                                    <NodeControl\r\n                                        node={this.state.selectedNode}\r\n                                        changeNodeLabel={this.changeNodeLabel}\r\n                                        changeStateIsAdmit={this.changeStateIsAdmit}\r\n                                        changeStateIsInitial={this.changeStateIsInitial}\r\n                                        deleteNode={this.deleteNode}\r\n                                        reinitComputer={computerAction.init}\r\n\r\n                                    />\r\n                                    <EdgeControl\r\n                                        edge={this.state.selectedEdge}\r\n                                        changeEdgeTransitions={this.changeEdgeTransition}\r\n                                        deleteEdge={this.deleteEdge}\r\n                                        computerType={this.state.computerType}\r\n                                        reinitComputer={computerAction.init}\r\n                                    />\r\n                                    <RunControl\r\n                                        updMem={this.updMem}\r\n                                        elements={this.state.elements}\r\n                                        treeElems={this.state.treeElems}\r\n                                        createHistNode={this.createHistNode}\r\n                                        byEmptyStack={this.state.byEmptyStack}\r\n                                        createHistEdge={this.createHistEdge}\r\n                                        getLastHistNodeId={this.getLastHistNodeId}\r\n                                        resetHistTree={this.resetHistTree}\r\n                                        changeStateIsCurrent={this.changeStateIsCurrent}\r\n                                        network={this.network}\r\n                                        changerStack={controlAction.changerByStack}\r\n                                        setInit={(f: () => void) => computerAction.init = f}\r\n                                        setNfaToDfa={(f: () => void) => computerAction.nfaToDfa = f}\r\n                                        setMinimizeDfa={(f: () => void) => computerAction.minimizeDfa = f}\r\n                                        setMooreToMealy={(f: () => void) => computerAction.mooreToMealy = f}\r\n                                        setMealyToMoore={(f: () => void) => computerAction.mealyToMoore = f}\r\n                                        updateElements={(elements: Elements) => this.setState({ elements: elements }, () => this.updateGraph())}\r\n                                        setComputerType={(type: null | ComputerType) => this.setState({ computerType: type })}\r\n                                        setResettedStatus={(status: boolean) => this.setState({ wasComputerResetted: status })}\r\n                                        setByEmptyStack={(byEmptyStack: boolean) => this.setState({ byEmptyStack: byEmptyStack })}\r\n                                        setChangerByStack={(f: () => void) => controlAction.changerByStack = f}\r\n                                        setRun={(f: () => void) => controlAction.run = f}\r\n                                        setStep={(f: () => void) => controlAction.step = f}\r\n                                        setReset={(f: () => void) => controlAction.reset = f}\r\n                                        setHistory={(jsx: () => JSX.Element) => this.setState({ History: jsx },\r\n                                            () => this.historyEndRef?.current?.scrollIntoView({ behavior: 'smooth' }))}\r\n                                        historyEndRef={this.historyEndRef}\r\n                                        setIsNonDetermenistic={this.setIsNonDetermenistic}\r\n                                        setIsNonMinimizable={this.setIsNonMinimizable}\r\n                                        treeVisible={this.treeVisible}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </ComputerTypeContext.Provider>\r\n                    } />\r\n                </Routes>\r\n            </HashRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React, {createRef, useEffect, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}